---
title: Input data management
format:
  html:
    css: input_data_resources/styles.css
---

<br>

When managing input data in your RAP, there are three key files:

* **Raw data:** The original data reflecting the system you will simulate.
* **Input modelling code:** Code/scripts used to estimate parameters or fit distributions.
* **Parameters:** Numerical values used by your model (e.g., arrival rates, service times).

![](input_data_resources/input_files.png)

<br>

## What is included in a RAP?

Your reproducible analytical pipeline (RAP) should begin with the **earliest data you access**. This could be:

* **Raw data** (if you estimate parameters yourself), or-
* **Pre-defined parameters** (if these are already supplied).

Keep in mind that, especially in sensitive areas like healthcare, you may not be able to share your full RAP outside your team or organisation. Even so, it's crucial to **maintain a complete RAP internally** so your work remains fully reproducible. For example:

![](input_data_resources/input_rap.png)

> **Why is this important?** By starting at the source, you make your work transparent and easy to repeat. For instance, if new raw data becomes available, it's important you have your input modelling code so that you can check your distributions are still appropriate, re-estimate your model parameters, and re-run your analysis.

<br>

## Raw data

This is data which reflects system you will be simulating. It is used to estimate parameters and fit distributions for your simulation model. For example:

::: {.grey-table}

| ARRIVAL_DATE | ARRIVAL_TIME | SERVICE_DATE | SERVICE_TIME | DEPARTURE_DATE | DEPARTURE_TIME |
|--------------|--------------|--------------|--------------|----------------|----------------|
| 2025-01-01   | 0001         | 2025-01-01   | 0007         | 2025-01-01     | 0012           |
| 2025-01-01   | 0002         | 2025-01-01   | 0004         | 2025-01-01     | 0007           |
| 2025-01-01   | 0003         | 2025-01-01   | 0010         | 2025-01-01     | 0030           |
| 2025-01-01   | 0007         | 2025-01-01   | 0014         | 2025-01-01     | 0022           |

:::

### üìã Checklist: Managing your raw data

:::{.cream}

üóÇÔ∏è **Always**

* **Keep copies of your raw data**<br>Or, if you can't export it, document how to access it (e.g. database location, required permissions).

* **Record metadata**<br>Include: data source, date obtained, time period covered, number of records, and any known issues.

* **Keep copy of the data dictionary**<br>If none exists, create one to explain your data's structure and variables.

<br>

üîì **If you can share the data:**

* **Make the data openly available**<br>Follow the FAIR principles: Findable, Accessible, Interoperable, Reusable.

* **Deposit in a trusted archive**<br>Use platforms like Zenodo, Figshare, GitHub or GitLab.

* **Add an open data licence**<br>Examples: CC0, CC-BY.

* **Provide a citation or DOI**<br>Make it easy for others to reference your dataset.

<br>

üîí **If you cannot share the data:**

* **Describe the dataset**<br>Include details in your documentation.

* **Share the data dictionary**<br>If allowed, to help others understand the data structure.

* **Consider providing a synthetic dataset**<br>Create a sample with the same structure (but no sensitive information) so that others can understand the data layout and test run code.

* **Explain access restrictions**<br>State why sharing isn't possible and provide contact information for access requests.

:::

:::{.callout collapse="true"}

## üëÜ Click to view example metadata

> "Data sourced from the XYZ database. Copies are available in this repository, or, to access directly, log in to the XYZ database and navigate to [path/to/data].
>
> Data covers January 2012 to December 2017, with [number] records. Note: [details on missing data, known issues, etc.].
>
> A copy of the data dictionary is available in the repository or online at [URL]."
>
> Access to the dataset is restricted due to patient confidentiality. Researchers interested in accessing the data must submit a data access request to the XYZ Data Governance Committee. For more information, contact data.manager@xyz.org.

:::

:::{.callout collapse="true"}

## üëÜ Click to view example data dictionary

A data dictionary describes each field, its format, units, and any coding schemes used. Example data dictionary:

::: {.grey-table}

| Field          | Field name                  | Format           | Description                                           |
|----------------|----------------------------|------------------|-------------------------------------------------------|
| ARRIVAL_DATE   | CLINIC ARRIVAL DATE        | Date(CCYY-MM-DD) | The date on which the patient arrived at the clinic   |
| ARRIVAL_TIME   | CLINIC ARRIVAL TIME        | Time(HH:MM)      | The time at which the patient arrived at the clinic   |
| DEPARTURE_DATE | CLINIC DEPARTURE DATE      | Date(CCYY-MM-DD) | The date on which the patient left the clinic         |
| DEPARTURE_TIME | CLINIC DEPARTURE TIME      | Time(HH:MM)      | The time at which the patient left the clinic         |
| SERVICE_DATE   | NURSE SERVICE START DATE   | Date(CCYY-MM-DD) | The date on which the nurse consultation began        |
| SERVICE_TIME   | NURSE SERVICE START TIME   | Time(HH:MM)      | The time at which the nurse consultation began        |

:::

:::

<br>

## Input modelling code

[Input modelling code](input_modelling.qmd) refers to the scripts used to define and fit the statistical distributions that represent the uncertain inputs for a simulation model.

These scripts are often not shared, but are an essential part of your simulation RAP. Sharing them ensures transparency in how distributions were chosen and allows you (or others) to re-run the process if new data or assumptions arise.

### üìã Checklist: Managing your input modelling code

:::{.cream}

üîì **If you can share the code:**

* **Include the input modelling code in your repository**<br>Store it alongside your simulation code and other relevant scripts.

<br>

üîí **If you cannot share the code:**

* **For internal use:**
  * Store the code securely and ensure it is accessible to your team or organisation - avoid saving it only on a personal device.
  * Use version control (e.g. a private GitHub repository) to track changes and maintain access.
* **For external documentation:**
  * Clearly describe the input modelling process.
  * Explain why the code cannot be shared (e.g. it contains sensitive or proprietary logic).

:::

<br>

## Parameters

Parameters are the numerical values used in your model, like the arrival rates, service times or probabilities.

### üìã Checklist: Managing your parameters

:::{.cream}

üóÇÔ∏è **Always**

* **Keep a structured parameter file**<br>Store all model parameters in a clearly structured format like a [CSV file](parameters_file.qmd) or a [script](parameters_script.qmd).

* **Document each parameter**<br>Include a data dictionary or documentation describing each parameter, its meaning, units, and any abbreviations or codes used.

* **Be clear how parameters were determined**.<br> If you calculated them, link to the input modelling code or describe the calculation steps (as above). If they were supplied to you, then clearly state the source of the parameters and any known processing or transformation.

<br>

üîì **If you can share the parameters:**

* **Include parameter files in your repository**<br>Store parameter files alongside your model code and documentation.

<br>

You must share some parameters with your model so that it is possible for others to run it. Parameters are often less sensitive than raw data, so sharing is usually possible. However-

üîí **If you cannot share the parameters:**

* **Provide synthetic parameters**<br>Supply artifical values for each parameter, clearly labelled as synthetic.

* **Describe how synthetic parameters were generated**<br>Document the process or basis for generating synthetic values (e.g. totally artifical, based on published ranges, expert opinion).

* **Explain access restrictions**<br>State why real parameters cannot be shared and provide contact information fore requests, if appropriate.

:::

<br>

## Maintaining a private and public version of your model

It is likely that you may have some data and/or code that you need to keep private, and cannot share along with the simulation model. It's important that **both the private and public components are [version controlled](../setup/version.qmd)**. One way of managing this is to have two separate repositories: a private repository and a public repository.

**If the public repository contains the real parameters** and results, it's quite simple: use the private repository for processing input data, then switch to the public repository for running the model.

**If the public repository only contains synthetic parameters**, you'll need to be able to run the simulation in the private repository with the real parameters and results, and also in the public repository with the synthetic parameters and results. To avoid duplicating the simulation code across both repositories, a good strategy is to develop your [simulation code as a package](../setup/package.qmd). This package can be published on GitHub, PyPI, or simply installed locally. Your private repository can then import and use this package, allowing you to maintain a single version of the simulation code while keeping sensitive parameters and data private. <!--TODO: need to explain better about the import of package options-->

<br>

## Further information

* ["How to Make a Data Dictionary"](https://help.osf.io/article/217-how-to-make-a-data-dictionary) from OSF Support.
* ["Open Research Data and Materials"](https://open-science-training-handbook.github.io/Open-Science-Training-Handbook_EN/02OpenScienceBasics/02OpenResearchDataAndMaterials.html) from the Open Science Training Handbook.
* ["The Research Data Management Workbook"](https://caltechlibrary.github.io/RDMworkbook/) from Kristin Briney 2024.