# Structuring our model as a package {#sec-package}

{{< include ../../scripts/language-selector.html >}}

> @sec-guidelines:
>
> * NHS Levels of RAP (🥈): Code is well-organised following standard directory format.
> * NHS Levels of RAP (🥇): Code is fully packaged.

## Rationale

Building our simulation model as a package has several advantages:

* The model is **installed** in our environment and can then be easily used anywhere else in our directory (or even from other directories) without needing to specify a system path.
* It encourages us to create a well-organised repository following **standardised** established package structures.
* It helps keep the model and analysis code **separate**, improving maintainability, reusability, and reducing the risk of unintended side effects.
* It supports automated **testing** frameworks which can verify functionality (@sec-tests).

## Packaging our model

::: {.python-content}

### Creating a package

In Python, a package is simply a directory with containing an 📄`__init__.py` file, which makes that directory recognisable as a package. The basic structure for our package is:

```{.bash}
our_directory/
├── simulation/             # Main package directory
│   ├── __init__.py         # Makes the directory a package
│   ├── model.py            # Code for the model
│   └── ...                 # Other .py files (e.g. parameters, replications)
└── pyproject.toml          # Package metadata
```

The code for the model is contained in 📁`simulation/` within individual python files (e.g. 📄`model.py`). The 📄`__init__.py` file identifies this directory as a package and contains basic metadata:

```{.bash}
"""SimPy Discrete-Event Simulation (DES) Model.
"""

__version__ = "0.1.0"
```

The 📄`pyproject.toml` file in the root directory contains package configuration information. We're using `flit` as our build tool because of its simplicity. The `dynamic` field tells flit to extract the version and description from our 📄`__init__.py` file.

```{.bash}
[build-system]
requires = ["flit"]
build-backend = "flit_core.buildapi"

[project]
name = "simulation"
dynamic = ["version", "description"]
```

### Installing and using the package

<!--TODO: Update so this refers back to @sec-environment, and we are updating the environment created there, and have made some basic empty files here, which we test installing locally, so its an action-->

To use our package during development, we install it in "editable" mode using the `-e` flag. This means it will update with any changes to the source code in 📁`simulation/`.

In a conda 📄`environment.yaml` file:

```{.bash}
name: our-environment
channels:
  - conda-forge
dependencies:
  - python
  - simpy
  - pip:
    - -e .[dev]
```

In a 📄`requirements.txt` file:

```{.bash}
simpy
-e .[dev]
```

<!--TODO: add examples of scripts and .ipynb using the package, not just the env installation. perhaps it could be a package v.s. analysis section? Or just Analysis using this package. Same for R below. -->

### Further information

* ["How I use Python to organize my data analyses"](https://joshuacook.netlify.app/posts/2024-07-27_python-data-analysis-org/) from Joshua Cook 2024 

:::

::: {.r-content}

### Creating a package

A basic R package structure looks like this:

```{.bash}
our_directory/
├── R/                  # Directory containing R functions
│   ├── model.R         # Code for the model
│   └── ...             # Other .R files (e.g. parameters, replications)
├── man/                # Documentation (generated from roxygen comments)
├── tests/              # Unit tests
├── DESCRIPTION         # Package metadata
├── NAMESPACE           # Package exports (usually generated)
└── rmarkdown/          # Analysis notebooks
```

The core of our package is the 📁`R/` directory, which contains all our simulation functions within R files (e.g. 📄`model.R`). Each function should be documented using roxygen2-style comments that will automatically generate the documentation in the 📁`man/` directory. Writing these docstrings is covered in @sec-docstrings.

The `DESCRIPTION` file contains essential metadata about the package:

```{.bash}
Package: simulation
Type: Package
Title: Simulation
Version: 0.1.0
Authors@R: c(
    person(
      "Amy", "Heather",
      email = "a.heather2@exeter.ac.uk",
      role = c("aut", "cre")
    )
  )
URL: https://github.com/pythonhealthdatascience/rap_template_r_des
Description: Template reproducible analytical pipeline (RAP) for simple R
    discrete-event simulation (DES) model.
License: MIT + file LICENSE
Encoding: UTF-8
LazyData: true
RoxygenNote: 7.3.2
Imports:
    simmer,
    magrittr,
    dplyr,
    purrr,
    rlang,
    tidyr,
    tidyselect,
    future,
    future.apply,
    ggplot2,
    tibble,
    gridExtra,
    R6
Suggests:
    testthat (>= 3.0.0),
    patrick,
    lintr,
    devtools,
    xtable,
    data.table,
    mockery
Config/testthat/edition: 3
```

### Installing and using the package

We use the `devtools` package to build and install our package:

```{.r}
# Install the package from the local directory
devtools::install()

# Load the package
library(simulation)

# Now you can use functions from the package...
```

When developing the package, these commands are particularly helpful:

* `devtools::document()` to reproduce documentation in 📁`man/` after changes to the docstrings.
* `devtools::check()` to build and check the package follows best practices.
* `devtools::install()` to load the latest version of the package into your environment.
* `devtools::test()` to run the tests in 📁`tests/`.

For analysis and reporting, we store our files in the 📁`rmarkdown/` directory rather than in 📁`vignettes/`. This is because files in 📁`vignettes/` are re-run with every package build/check. For simulations with longer run times, this can be inefficient - although this may be of interest for quicker simulations, as it will help ensure you always run everything from scratch. However, file paths for saving outputs can cause errors during the package build process.

<!--TODO: add a better context on what vignettes are, and how people talking about using r for research often mention putting your stuff in there -->

### Further information

* ["Open, Reproducible, and Distributable Research With R Packages"](https://dante-sttr.gitlab.io/r-open-science/) from the DANTE Project - for example, this page on [vignettes](https://dante-sttr.gitlab.io/r-open-science/reports-manuscripts.html).
* ["Sharing and organizing research products as R packages"](https://doi.org/10.3758/s13428-020-01436-x) from Vuorre and Crump 2020

:::

