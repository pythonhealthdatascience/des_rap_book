[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Discrete-Event Simulation in Python and R",
    "section": "",
    "text": "This book is a step-by-step guide to writing reproducible discrete-event simulation models in Python and R.\nIt guides you through creating these models whilst meeting reproducibility requirements from:\n\nüåø Heather et al.¬†2025 ‚ÄúOn the reproducibility of discrete-event simulation studies in health research: an empirical study using open models‚Äù\nüè• The ‚ÄúLevels of RAP‚Äù framework from the NHS RAP Community of Practice\n\nThese are described further in Reproducibility guidelines: Reproducibility guidelines.\nThe models are created using:\n\nSimPy for Python - https://simpy.readthedocs.io/en/latest/.\nsimmer for R - https://r-simmer.org/.\n\nThis book uses healthcare discrete-event simulation models as its primary case study - modelling patient flows and resource allocation in clinical settings. However, the reproducibility principles and coding practices can be applied in other fields and for other modelling and analysis techniques.\nIt has been developed as part of the STARS project:\n\nAll code in this book is provided under the MIT licence. The accompanying text is licensed under a Creative Commons Attribution-ShareAlike 4.0 International license.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html",
    "href": "pages/intro/guidelines.html",
    "title": "Reproducibility guidelines",
    "section": "",
    "text": "Reproducibility recommendations from Heather et al.¬†2025\nThere‚Äôs lots of guidance to support reproducible research. This book focuses specifically on healthcare discrete-event simulation (DES) models, drawing from two particularly relevant frameworks:\nThis book walks through how to address all aspects of these guidelines, and the links below (üîó) take you to relevant pages with detailed guidance on each topic.\nAs part of the project STARS (Sharing Tools and Artefacts for Reproducible Simulations), a series of computational reproducibility assessments were conducted by Heather et al.¬†2025. From these, several recommendations were shared to support reproducibility of healthcare discrete-event simulation (DES) models, as described in:\nThose marked with a star (‚≠ê) were identified as having the greatest impact in Heather et al.¬†2025.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "href": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "title": "Reproducibility guidelines",
    "section": "",
    "text": "Heather, A. Monks, T. Harper, A. Mustafee, N. Mayne, A. On the reproducibility of discrete-event simulation studies in health research: an empirical study using open models (2025). arxiv. https://doi.org/10.48550/arXiv.2501.13137.\n\n\n\nRecommendations to support reproduction\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nSet-up\n\n\n\nShare code with an open licence ‚≠ê\nLicensing\n\n\nLink publication to a specific version of the code\nChangelog\n\n\nList dependencies and versions\nDependency management\n\n\nRunning the model\n\n\n\nProvide code for all scenarios and sensitivity analyses ‚≠ê\nScenarios and sensitivity analysis\n\n\nEnsure model parameters are correct ‚≠ê\nFull run\n\n\nControl randomness\nSampling distributions and seeds\n\n\nOutputs\n\n\n\nInclude code to calculate all required model outputs ‚≠ê\nOutputs\n\n\nInclude code to generate the tables, figures, and other reported results ‚≠ê\nProducing tables and figures\n\n\n\n\n\nRecommendations to support troubleshooting and reuse\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nDesign\n\n\n\nSeparate model code from applications\n‚ùì\n\n\nAvoid hard-coded parameters\nParameter management\n\n\nMinimise code duplication\nCode organisation\n\n\nClarity\n\n\n\nComment sufficiently\nDocstrings\n\n\nEnsure clarity and consistency in the model results tables\nOutputs\n\n\nInclude run instructions\nDocumentation\n\n\nState run times and machine specifications\nDocumentation\n\n\nFunctionality\n\n\n\nOptimise model run time\nParallel processing\n\n\nSave outputs to a file\nProducing tables and figures\n\n\nAvoid excessive output files\n‚ùì\n\n\nAddress large file sizes\n‚ùì",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "href": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "title": "Reproducibility guidelines",
    "section": "‚ÄòLevels of RAP‚Äô Maturity Framework",
    "text": "‚ÄòLevels of RAP‚Äô Maturity Framework\nThe following framework has been directly copied from the RAP Community of Practice repository/website: NHS RAP Levels of RAP Framework.\nThis framework is maintained by the NHS RAP Community of Practice and is ¬© 2024 Crown Copyright (NHS England), shared by them under the terms of the Open Government 3.0 licence.\nThe specific version of the framework copied below is that from commit 2549256 (9th September 2024).\n\nü•â Baseline\nRAP fundamentals offering resilience against future change.\n\n\n\nCriteria\nChapter\n\n\n\n\nData produced by code in an open-source language (e.g., Python, R, SQL).\nFree and open source software (FOSS)\n\n\nCode is version controlled (see Git basics and using Git collaboratively guides).\nVersion control and Git\n\n\nRepository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code (use NHS Open Source Policy section on Readmes as a guide).\nDocumentation\n\n\nCode has been peer reviewed.\nPeer review\n\n\nCode is published in the open and linked to & from accompanying publication (if relevant).\nSharing and archiving the model\n\n\n\n\n\nü•à Silver\nImplementing best practice by following good analytical and software engineering standards.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nOutputs are produced by code with minimal manual intervention.\nFull run\n\n\nCode is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.\nDocumentation Docstrings\n\n\nCode is well-organised following standard directory format.\nStructuring our model as a package\n\n\nReusable functions and/or classes are used where appropriate.\nCode organisation\n\n\nCode adheres to agreed coding standards (e.g PEP8, style guide for Pyspark).\nLinting\n\n\nPipeline includes a testing framework (unit tests, back tests).\nTests\n\n\nRepository includes dependency information (e.g.¬†requirements.txt, PipFile, environment.yml).\nDependency management\n\n\nLogs are automatically recorded by the pipeline to ensure outputs are as expected.\nLogs\n\n\nData is handled and output in a Tidy data format.\nOutputs\n\n\n\n\n\nü•á Gold\nAnalysis as a product to further elevate your analytical work and enhance its reusability to the public.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nCode is fully packaged.\nStructuring our model as a package\n\n\nRepository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g.¬†GitHub Actions.\nGitHub actions\n\n\nProcess runs based on event-based triggers (e.g., new data in database) or on a schedule.\nN/A\n\n\nChanges to the RAP are clearly signposted. E.g. a changelog in the package, releases etc. (See gov.uk info on Semantic Versioning).\nChangelog",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/foss.html",
    "href": "pages/intro/foss.html",
    "title": "Free and open source software (FOSS)",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Data produced by code in an open-source language (e.g., Python, R, SQL).",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Free and open source software (FOSS)</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html",
    "href": "pages/setup/version.html",
    "title": "Version control and Git",
    "section": "",
    "text": "Version control\nVersion control is a way to track changes to your documents over time. You can‚Ä¶\n‚úÖ Track changes to files: see what changes, when it changed, and who changed it.\n‚úÖ ‚ÄúRoll back‚Äù to earlier versions of your files if something goes wrong.\n‚úÖ Work simultaneously with others without overwriting each other.\n‚úÖ Try new ideas without risking your main work.\n‚úÖ Back up and share work online using platforms like GitHub.\nThis is super handy, whether you‚Äôre working by yourself or in a team!\nüí° Recommendation: Using version control from the start of the project.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#git",
    "href": "pages/setup/version.html#git",
    "title": "Version control and Git",
    "section": "Git",
    "text": "Git\nThe most popular version control system is Git.\nWhen using Git, we refer to our work as a repository. This is simply a folder containing your project files, as well as a special hidden .git/ folder which stores all the version history.\nWe take snapshots of the files at specific points in time, and these are called commits.\nGit can just be used on your local computer, but most people will use an online platform to store their repositories. The most popular options are:\n\nGitHub - https://github.com/.\nGitLab - https://gitlab.com/.\nGBitBucket - https://bitbucket.org/.\n\nThis tutorial will focus on GitHub as it is the most widely used and beginner-friendly.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#setting-up-a-github-repository",
    "href": "pages/setup/version.html#setting-up-a-github-repository",
    "title": "Version control and Git",
    "section": "Setting up a GitHub repository",
    "text": "Setting up a GitHub repository\n1. Create an account. Go to https://github.com/signup and sign up with your email and a username.\n\n\n2. Create a new repository. Click the ‚Äú+‚Äù button in the top right corner, and select ‚ÄúNew repository‚Äù.\n\n\n\n\n\nThen fill out the form to create a repository‚Ä¶\n\nRepository name: e.g.¬†emergency-des\nDescription: e.g.¬†Discrete-event simulation of a hospital emergency department.\nVisibility: Choose whether to make the repository public (anyone can see it) or private (only visible to you and people your invite).\nREADME: Select ‚ÄúAdd a README file‚Äù, which will create a blank README we can populate later (see Documentation).\n.gitignore: Select the ‚ÄúPython‚Äù or ‚ÄúR‚Äù .gitignore template. This will create a .gitignore file in your repository that tells Git which files not to track.\nLicence: Select an appropriate licence for your repository (see Licensing for more information and advice).\n\n\n\n\n\n\n\nSharing your work openly\n\n\n\nWe would encourage you to make your work open access - i.e.¬†creating a public GitHub repository, and using a permissive open licence (e.g.¬†MIT). As described by The Turing Way, benefits to making your work open include:\n\nSharing: Easy to reference and share in papers and presentations.\nTransparency: Clearly shows how you conducted your analyses.\nReproducibility: Others can verify and reproduce your results.\nQuality: Knowing it‚Äôs public encourages good practice.\nReuse and learning: Others can learn from and build on your work, reducing research waste.\nExtends impact: Your work can continue to have impact after the project ends. This could include for you, if you change jobs, and want to be able to look back on old code!\nCollaboration: Creates opportunities for collaboration, if others come across your code and are interested in working together.\nFunder requirements: For research projects, some grants now mandate open code.\n\nIncluding a license (Licensing) and citation instructions (Citation guidance) enables others to use your code while giving you credit.\nThat said, it‚Äôs your code and your choice - if you have specific concerns or proprietary work, a private repository is always an option.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#cloning-the-repository",
    "href": "pages/setup/version.html#cloning-the-repository",
    "title": "Version control and Git",
    "section": "Cloning the repository",
    "text": "Cloning the repository\nYou have created a remote repository on GitHub - we now want to clone it, which means we create a local copy on your computer, and can sync between the local and remote repositories.\n\n1. Get the URL. On the main page of you repository, click the green ‚Äú&lt;&gt; Code‚Äù button, then copy the HTTPS url.\n\n\n2. Clone the repository. Depending on your operating system, open either the terminal (Linux or Mac) or Git Bash (windows). Navigate to the location where you would like to create the folder containing your repository. Then enter git clone and the pasted URL - for example:\ngit clone https://github.com/amyheather/hospital-des.git\n\nThis will have created a local copy of the repository, which you can open with your preferred development environment (e.g.¬†VSCode, RStudio).",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#creating-a-branch-and-pushing-changes",
    "href": "pages/setup/version.html#creating-a-branch-and-pushing-changes",
    "title": "Version control and Git",
    "section": "Creating a branch and pushing changes",
    "text": "Creating a branch and pushing changes\nIt is best practice to work in branches. A branch is like a separate workspace where you can safely experiment with changes without affecting the main project.\nAs in the diagram below, you can make several commits in this branch, and when you‚Äôre ready, merge back into the main project (e.g.¬†when new feature complete, or reached a stable point where everything is working properly).\nThis is valuable even when you‚Äôre the only person working on the repository - but with multiple collaborator, becomes essential! Every person should work on their own branch.\n\nTo work in a branch and push changes‚Ä¶\n\n1. Create a branch. Open your terminal or Git Bash, and make sure your current working directory is your Git repository. To create a new branch (here, named dev), then run:\ngit branch dev\nTo move into this branch:\ngit checkout dev\nYou should see a message ‚ÄúSwitched to branch ‚Äòdev‚Äô‚Äù.\nWe can add this branch to the remote GitHub repository by running:\ngit push -u origin dev\n\n2. Make some changes. This could be any changes to code, documentation or other artefacts in the repository. So we can test this out, let‚Äôs make a simple change to our README -\nBefore:\n# hospital-des\nDiscrete-event simulation of a hospital emergency department.\nAfter:\n# Hospital DES\n\nDiscrete-event simulation of a hospital emergency department.\n\nAuthor: Amy Heather\n\nWork in progress!\n\n3. Commit the changes. To save this new version of our file to Git, we need to commit the changes. We use git add to choose which files to commit. We then write a descriptive commit message using git commit. Finally, we push the changes using git push.\ngit add README.md\ngit commit -m \"docs(README): add author + work-in-progress notice\"\ngit push\n\n4. Merge the changes. One of the easiest ways to merge changes into main is using the GitHub website. Open your repository. You should see that you now have ‚Äú2 Branches‚Äù. Navigate to your new branch‚Ä¶\n\nWe can see this is now 1 commit ahead of main. We can browse the files in this branch, and can click on the right hand ‚Äú2 Commits‚Äù to view the version history.\n\nThis just has 2 commits - the creation of our repository, and the change to our README file:\n\nTo merge the changes with main, go back to the page for that branch, and select either:\n\n‚ÄúThis branch is 1 commit ahead of main‚Äù, or\n‚ÄúCompare & pull request‚Äù\n\n\nThis will open a page which shows all the new commits in your branch, and side-by-side changes the files you have modified.\nClick the green ‚ÄúCreate pull request‚Äù button.\n\nA pull request is a request to merge changes from one branch to another. This provides an opportunity, for example, for others to review the changes and make sure they are happy before these are merged.\nWe can modify the message - or just leave as is, and select the ‚ÄúCreate pull request‚Äù button.\n\nIf new changes have been made to the main branch since you created your branch (e.g., new commits, merges from other branches, or contributions from other collaborators) and you‚Äôve modified the same files, you may encounter merge conflicts that need to be resolved.\nIf not though, you can just select ‚ÄúMerge pull request‚Äù and then ‚ÄúConfirm merge‚Äù.\n\n\n\n5. Close your branch. We can now delete the branch-\n\nOn our local machine, switch back to main:\ngit checkout main\nThen pull the updated main branch, which contains our merged changes:\ngit pull\nWe can then delete our local branch:\ngit branch -d dev\nAnd also get the latest list of branches from the remote repository, with our old branch now removed:\ngit remote prune origin\nTo continue working in the repository, simply create a new branch and continue as above.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#github-organisations",
    "href": "pages/setup/version.html#github-organisations",
    "title": "Version control and Git",
    "section": "GitHub organisations",
    "text": "GitHub organisations\nWhen creating a GitHub repository, by default, it will set the owner to be your personal user account. While this works well for person projects, you will often find it better to create repositories within a GitHub organisation instead.\nA GitHub organisation acts like a shared account which multiple people can own, access and collaborate on. Advantages of this are:\n\nOne place for each project/team. Related repositories are grouped into one organisation. For example, you could have different organisations for different teams or projects, with all the relevant repositories for each.\nShared ownership. Multiple people can have administrative access.\nContinuity. If you leave a project, repositories remain accessible to and owned by the team.\nProfessional branding. Repositories appear under the organisation name rather than your personal username.\n\nTo create a GitHub organisation‚Ä¶\n\n1. Open settings. In the top-right corner, select your profile photo, then click ‚ÄúSettings‚Äù.\n\n\n\n\n\nThen select ‚ÄúOrganizations‚Äù under the Access section in the sidebar.\n\n\n\n\n\n\n2. Make new organisation. In the top-right corner, select ‚ÄúNew organization‚Äù.\n\n3. Choose a plan. For example, simply select the Free plan.\n\n4. Enter your organisation details. It will ask for a name and contact email. You can typically then select that the organisation belongs to your personal account. Follow the prompts to create the organisation. You can then add other GitHub users as owners or collaborators.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html",
    "href": "pages/setup/environment.html",
    "title": "Dependency management",
    "section": "",
    "text": "Dependency management is about keeping track of the environment used for your project. This includes the version of your programming languages, any packages used, and their versions.\nIt acts like a time capsule, allowing you to return to a project later and run it with the exact same packages and versions, reproducing the results generated previously.\nDependency management enables you to isolate environments for different projects. Each project can have it‚Äôs own set of dependencies, preventing conflicts and making it easy to switch between projects.\nIt is also important for collaboration, so that everyone working on the project is using the same environment.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#python-tools-for-dependency-management",
    "href": "pages/setup/environment.html#python-tools-for-dependency-management",
    "title": "Dependency management",
    "section": "Python tools for dependency management",
    "text": "Python tools for dependency management\nThere are lots of tools available for managing dependencies in isolated environments in python. A few of the most popular tools include venv, conda, and poetry.\nIn this book, we will use conda, as it allows us to specify a python version, so each environment we create can have a different specific version of python. This is not possible with venv and poetry, which just manage the package dependencies, and will just use the system python.\n\n\n\n\n\n\nMamba\n\n\n\nMamba is a drop-in replacement for conda that is often preferred as it is:\n\nFaster than conda.\nBetter at dealing with dependency conflicts, providing more helpful messages in cases where environments fail to builds due to clashing requirements of different packages.\n\nTo use mamba, simply replace conda in all the commands below with mamba.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#installing-conda-or-mamba",
    "href": "pages/setup/environment.html#installing-conda-or-mamba",
    "title": "Dependency management",
    "section": "Installing conda (or mamba)",
    "text": "Installing conda (or mamba)\nRefer to the conda or mamba documentation for the latest instructions on installing these for your operating system (windows, mac or linux).\n\nConda installation instructions.\nMamba installation instructions.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#setting-up-our-conda-environment",
    "href": "pages/setup/environment.html#setting-up-our-conda-environment",
    "title": "Dependency management",
    "section": "Setting up our conda environment",
    "text": "Setting up our conda environment\n1. Create an environment file. In the project root, we create environment.yaml.\ntouch environment.yaml\nWithin this file, we add three sections:\n\nName. The environment name.\nChannels. Where to find packages (e.g.¬†conda-forge). \nDependencies. The packages you need.\n\nWhen first creating our environment, we just list the dependencies we know we need at this point - we can always add more later! At the start of a project, you might only know one: python.\nAs an example, we will add simpy and python.\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - python\n  - simpy\n\n2. Build and activate the environment. In the command line, run the following to create your environment:\nconda env create --file environment.yaml\nYou can then activate it (replacing des-example with your environment name):\nconda activate des-example\nTo confirm your environment contains the expected packages, run:\nconda list\nThis will output a list of packages, versions, builds and channels. For example, it may look similar to:\n(des-example) amy@xps:~/Documents/hospital-des$ conda list\n# packages in environment at /home/amy/mambaforge/envs/des-example:\n#\n# Name                    Version                   Build  Channel\n_libgcc_mutex             0.1                 conda_forge    conda-forge\n_openmp_mutex             4.5                       2_gnu    conda-forge\nbzip2                     1.0.8                h4bc722e_7    conda-forge\nca-certificates           2025.1.31            hbd8a1cb_1    conda-forge\nld_impl_linux-64          2.43                 h712a8e2_4    conda-forge\nlibexpat                  2.7.0                h5888daf_0    conda-forge\nlibffi                    3.4.6                h2dba641_1    conda-forge\nlibgcc                    14.2.0               h767d61c_2    conda-forge\nlibgcc-ng                 14.2.0               h69a702a_2    conda-forge\nlibgomp                   14.2.0               h767d61c_2    conda-forge\nliblzma                   5.8.1                hb9d3cd8_0    conda-forge\nlibmpdec                  4.0.0                h4bc722e_0    conda-forge\nlibsqlite                 3.49.1               hee588c1_2    conda-forge\nlibuuid                   2.38.1               h0b41bf4_0    conda-forge\nlibzlib                   1.3.1                hb9d3cd8_2    conda-forge\nncurses                   6.5                  h2d0b736_3    conda-forge\nopenssl                   3.5.0                h7b32b05_0    conda-forge\npip                       25.0.1             pyh145f28c_0    conda-forge\npython                    3.13.3          hf636f53_101_cp313    conda-forge\npython_abi                3.13                    7_cp313    conda-forge\nreadline                  8.2                  h8c095d6_2    conda-forge\nsimpy                     4.1.1              pyhd8ed1ab_1    conda-forge\ntk                        8.6.13          noxft_h4845f30_101    conda-forge\ntzdata                    2025b                h78e105d_0    conda-forge\n\n3. Specify versions. For reproducibility, it‚Äôs best to specify the exact package versions in you environment.yaml. If you‚Äôre starting from scratch, you may not know which versions you need, so you can leave them out initially, as we did in step 1.\nHowever, now that we have built our environment (which used the latest versions as none were specified), it is important to then record your versions in the environment.yaml. These are the versions you saw when running conda list. For example:\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.13.3\n  - simpy=4.1.1\n\n4. Setting up the full environment for this book. When working on a project from scratch, you will often build up your environment organically and iteratively as you find more packages you want to use. However, to follow along with this book and ensure everything works as expected, you can use the full environment provided below. Copy this into your environment.yaml (feel free to alter the name!):\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - ipykernel=6.29.5\n  - jinja2=3.1.5\n  - joblib=1.4.2\n  - nbconvert=7.16.6\n  - nbformat=5.10.4\n  - nbqa=1.9.0\n  - numpy=2.2.2\n  - pandas=2.2.3\n  - pip=25.0\n  - plotly_express=0.4.1\n  - pylint=3.3.4\n  - pytest=8.3.4\n  - pytest-xdist=3.6.1\n  - python=3.13.1\n  - rich=13.9.4\n  - simpy=4.1.1\n  - pip:\n    - kaleido==0.2.1\n    - sim-tools==0.8.0\nThen update your environment to include these packages (after running conda activate des-example) with:\nconda env update --file environment.yaml --prune\n\n\n\nFurther information\n\n‚ÄúAn unbiased evaluation of environment management and packaging tools‚Äù from Anna-Lena Popkes 2024\n‚ÄúPython dependency management is a dumpster fire‚Äù from Niels Cautaerts 2024",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#r-tools-for-dependency-management",
    "href": "pages/setup/environment.html#r-tools-for-dependency-management",
    "title": "Dependency management",
    "section": "R tools for dependency management",
    "text": "R tools for dependency management\nThe most popular tool for managing dependencies in R is renv. This replaced and improved upon the previous tool, Packrat.\nRenv will create isolated environments with the specific packages and their versions for a project. However, it won‚Äôt manage the version of R used - the version of R used is simply whatever is installed on your system.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#setting-up-renv",
    "href": "pages/setup/environment.html#setting-up-renv",
    "title": "Dependency management",
    "section": "Setting up renv",
    "text": "Setting up renv\n1. Create an R project. It‚Äôs best to use renv within an R project. In RStudio, select File &gt; New Project‚Ä¶, and choose Existing Directory.\n\n\n\n\n\nNavigate to your project directory, then select Create Project.\n\n\n\n\n\nThis creates:\n\n.Rproj: project file (contains some settings for the project).\n.Rproj.user: hidden folder with temporary project files (e.g.¬†auto-saved source documents).\n\nNote: R projects are commonly created and managed by RStudio. If you are not using RStudio, they can be difficult to set-up, as they have to be created manually. However, it is possible to use renv without an R project, as discussed in this GitHub issue. This can be done by using setwd() to set your repository as the current working directory, and then continuing with the steps below, running renv::init().\n\n2. Initialise renv. In your R console:\nrenv::init()\nThis creates:\n\nrenv/: stores packages for the project.\nrenv.lock: records packages and the exact versions used.\n.Rprofile: ensures renv activates when the project opens.\n\n\nWith renv initialised, you will now have an empty project library, just containing renv, as you can see from viewing renv.lock (example below). This is isolated from your previous projects, and from here, you can install the packages relevant for your current project.\nExample renv.lock:\n{\n  \"R\": {\n    \"Version\": \"4.4.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://packagemanager.posit.co/cran/latest\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"1.0.7\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"397b7b2a265bc5a7a06852524dabae20\"\n    }\n  }\n}",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#adding-packages-to-the-environment",
    "href": "pages/setup/environment.html#adding-packages-to-the-environment",
    "title": "Dependency management",
    "section": "Adding packages to the environment",
    "text": "Adding packages to the environment\nIt is possible to simply install packages using renv::install(\"packagename\") or install.packages(\"packagename\").\nHowever, we recommend using a DESCRIPTION file. This is because it allows you to keep a record of the main packages you installed. You‚Äôll generate a clear, readable summary of the main dependencies for your project.\nWhy use a DESCRIPTION file?\n\nClear requirements. The DESCRIPTION file provides a clear summary of your project‚Äôs main pages. This is much easier to read than renv.lock, which lists all the packages and their dependencies, making it cumbersome if you just want to see the key packages.\nConsistency with package development. If your project is (or might become) an R package, the DESCRIPTION file is the standard way to declare dependencies.\nAlternative for environment recreation. While renv.lock is the primary tool for restoring the exact environment, having a DESCRIPTION file is a valuable backup. If you encounter issues with renv.lock, you (or collaborators) can use DESCRIPTION to reinstall the main dependencies - with more information on this below in the section on recreating environments.\nExplicit snapshots. If you want precise control over what is included in renv.lock, a DESCRIPTION file enables you to use ‚Äúexplicit‚Äù snapshots. These mean only the packages listed in DESCRIPTION (and their dependencies) are recorded - as is covered below in the step on updating your renv.lock file.\n\n\n\n1. Create DESCRIPTION file. Run in the terminal:\ntouch DESCRIPTION\nOpen the file and copy in the template below. You can customise some of the meta-data (e.g.¬†package, title, authors, description).\nThis is a standard template. You can create an identical file with usethis by running usethis::use_description(). However, we can just create it from scratch, which helps to minimise our dependencies.\nPackage: packagename\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.0.0\n\n2. List dependencies. In DESCRIPTION, dependencies are listed under two headings:\n\nImports: for required packages.\nSuggests: for optional/development packages.\n\nFor most projects (especially non-packages), it‚Äôs fine to just list all your dependencies under Imports for simplicity. The distinction betweeen Imports and Suggests is more relevant when constructing your research as an R package, as it will distinguish between those necessary for the core simulation and those for other analysis and tests (see Structuring our model as a package). \nAt the very beginning of your project, your DESCRIPTION file might only include a few packages. For example, if you are starting with just the simmer package, your Imports section would look like this:\nImports:\n    simmer\nAs your project develops and you find yourself using additional packages, simply add each new dependency to the Imports section of your DESCRIPTION file.\nIf you are following along with this book, you can use the following DESCRIPTION snippet to include all the packages needed to run the provided code in this book:\nImports:\n    simmer,\n    magrittr,\n    dplyr,\n    purrr,\n    rlang,\n    tidyr,\n    tidyselect,\n    future,\n    future.apply,\n    ggplot2,\n    tibble,\n    gridExtra,\n    R6\nSuggests:\n    testthat (&gt;= 3.0.0),\n    patrick,\n    lintr,\n    devtools,\n    xtable,\n    data.table,\n    mockery\nConfig/testthat/edition: 3\nNote: In the R Packages book, they recommend that versions are not specified in DESCRIPTION. Instead, they suggest that no version is specified - or that a minimum version is specified, if you know that an older version of specific package/s would break the code. This is why it is important to also create an renv.lock file (as below), so you do have a record of the exact versions used.\n\n3. Install packages from DESCRIPTION. Run the following command in your console. This will install the packages from DESCRIPTION, and will determine and install the dependencies of those packages too.\nrenv::install()\n\n4. Update renv.lock. To take a snapshot of your environment and update your renv.lock file, run:\nrenv::snapshot()\nThis will update the lock file with a full list of the exact packages and dependencies, including the versions you have installed, providing a clear record of your working environment.\nThere are three snapshot types:\n\nImplicit - records any packages (and their dependencies) listed in DESCRIPTION or used in your code.\nExplicit - only records packages (and their dependencies) listed in DESCRIPTION.\nAll - records all packages in your environment.\n\nThe default snapshot type is implicit, and we recommend this approach. This is because it will catch any packages you are using but that you have forgot to add to DESCRIPTION (although it is best to remember to record these in DESCRIPTION, so you have a nice clear list of packages, and don‚Äôt have to delve into renv.lock if you‚Äôre having issues).\nThe downside to this snapshot type if that it may include unnecessary packages if you include old scripts in your repository that use packages you no longer need. However, this can be avoided by removing old scripts (good practice!).\nIf you want to check your snapshot type, run this command in the R console:\nrenv::settings$snapshot.type()\nYou can then change it if desired using one of:\nrenv::settings$snapshot.type(\"implicit\")\nrenv::settings$snapshot.type(\"explicit\")\nrenv::settings$snapshot.type(\"all\")",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#subsec-recreate-env",
    "href": "pages/setup/environment.html#subsec-recreate-env",
    "title": "Dependency management",
    "section": "Recreate an existing environment",
    "text": "Recreate an existing environment\nWhen you want to recreate an environment‚Äîsuch as for an old project or when collaborating‚Äîyou have two main options, depending on which files are available:\n\n\n\n\n\n\n\n\nMethod\nWhat does it install?\nBest for‚Ä¶\n\n\n\n\nFrom renv.lock\nInstalls the exact package versions (and their dependencies) used previously\nFull reproducibility; restoring the original environment exactly\n\n\nFrom DESCRIPTION\nInstalls the main packages listed (and their dependencies), but uses the latest available versions (unless specified)\nGetting started quickly or if renv.lock is missing or problematic\n\n\n\n\n1. Restoring from renv.lock (preferred). If the project includes an renv.lock file, use this as your first option. This file records the exact versions of all packages used, enabling you to recreate the environment as it was originally (*except for R version and operating system differences).\nTo restore the environment, run in your R console:\nrenv::restore()\nThis will attempt to install all packages at the precise versions specified.\nOccasionally, you may encounter issues - such as conflicts, unavailable packages, or operating system differences - especially with older projects or across different systems.\n\n2. Rebuilding from DESCRIPTION. If renv.lock is unavailable or causes problems, you can use the DESCRIPTION file. This file lists the main package dependencies, but typically does not specify exact versions (unless you have set minimum versions for specific needs).\nTo install packages listed in DESCRIPTION, run:\nrenv::install()\nThis will install the latest available versions of the listed packages and their dependencies. This approach is less precise than using renv.lock, so results may differ slightly from the original environment, especially if package updates have introduced changes.\nIn theory, the R ecosystem aspires to maintain backwards compatability, meaning that code written for older package versions should continue to work with newer ones. However, in practice, there is no strict guarantee of backward compatibility in R, either for the core language or for contributed packages.\nAs discussed in the R packages book:\n\n‚ÄúIf we‚Äôre being honest, most R users don‚Äôt manage package versions in a very intentional way. Given the way update.packages() and install.packages() work, it‚Äôs quite easy to upgrade a package to a new major version without really meaning to, especially for dependencies of the target package. This, in turn, can lead to unexpected exposure to breaking changes in code that previously worked. This unpleasantness has implications both for users and for maintainers.‚Äù\n\nHence, using a lockfile like renv.lock is the only reliable way to ensure that your environment is recreated exactly as it was - but DESCRIPTION can serve as a valuable back-up when this doesn‚Äôt work, and otherwise just as a handy summary of the main packages.\n\n3. If neither file is provided. If you have neither a renv.lock nor a DESCRIPTION file, you can try to create a DESCRIPTION file based on your knowledge of the project and its required packages.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#system-dependencies",
    "href": "pages/setup/environment.html#system-dependencies",
    "title": "Dependency management",
    "section": "System dependencies",
    "text": "System dependencies\nSome R packages require external system libraries. The exact requirements will depend on which packages you use, what operating system you have, and whether you have used R before.\nIf these system libraries are missing, package installation may fail, even if you have the correct R package versions.\nFor example, working on Ubuntu, we found that we had to install the following system dependencies for igraph:\nsudo apt install build-essential gfortran\nsudo apt install libglpk-dev libxml2-dev\nYou should list any system dependencies that you are aware of in your project‚Äôs README or setup instructions.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#summary",
    "href": "pages/setup/environment.html#summary",
    "title": "Dependency management",
    "section": "Summary",
    "text": "Summary\nWe can use renv to create a reproducible environment in R. In the process above, we generated two key files:\n\nDESCRIPTION - lists project‚Äôs primary packages with any minimum version requirements, but not exact versions.\nrenv.lock - complements this by recording the precise versions of all packages and their dependencies.\n\nThese work together to both provide (a) a comprehensive record of your project environment, and (b) enable yourself or others to reconstruct the environment.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#further-information-1",
    "href": "pages/setup/environment.html#further-information-1",
    "title": "Dependency management",
    "section": "Further information",
    "text": "Further information\n\n‚Äú9. DESCRIPTION‚Äù from R Packages by Hadley Wickham and Jennifer Bryan.\n‚Äú21. Lifecycle‚Äù from R Packages by Hadley Wickham and Jennifer Bryan.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html",
    "href": "pages/setup/package.html",
    "title": "Structuring our model as a package",
    "section": "",
    "text": "Building our simulation model as a package has several advantages‚Ä¶\n‚úÖ The model is installed in our environment and can then be easily used anywhere else in our directory (or even from other directories) without needing to specify a system path.\n‚úÖ It encourages us to create a well-organised repository following standardised established package structures.\n‚úÖ It helps keep the model and analysis code separate, improving maintainability, reusability, and reducing the risk of unintended side effects.\n‚úÖ It supports automated testing frameworks which can verify functionality (Tests).",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#create-the-python-package-structure",
    "href": "pages/setup/package.html#create-the-python-package-structure",
    "title": "Structuring our model as a package",
    "section": "Create the Python package structure",
    "text": "Create the Python package structure\nFirst, let‚Äôs create the basic directory structure for our simulation package.\n\n1. Create folder. Create a folder called simulation/ in your project directory.\nmkdir simulation\n\n2. Make init file. Inside the simulation/ folder, create an __init__.py file.\ntouch simulation/__init__.py\nOpen this file and copy in some basic metadata.\n\"\"\"SimPy Discrete-Event Simulation (DES) Model.\n\"\"\"\n\n__version__ = \"0.1.0\"\n\n3. Add a .py file with a function. Within simulation/, create a file called model.py.\ntouch simulation/model.py\nIn this, we will add our model code. For now, just copy in this simple function that generates a list of numbers. We will add some real code for our model later.\n\"\"\"Core simulation model functionality.\"\"\"\n\n\ndef run_simulation(duration=100):\n    \"\"\"\n    Run a simple dummy simulation for the specified duration.\n\n    Parameters\n    ----------\n    duration: int\n        The length of time to run the simulation.\n\n    Returns:\n        dict:\n            Dummy simulation results.\n    \"\"\"\n    return {\n        \"duration\": duration,\n        \"status\": \"completed\",\n        \"results\": [i for i in range(duration) if i % 10 == 0]\n    }\n\n4. Make pyproject file. Create a pyproject.toml file in the project root directory (outside the simulation folder).\ntouch pyproject.toml\nCopy the text below into this file. This provides instructions for building the package. We‚Äôre using flit as our build tool because of its simplicity. The dynamic field tells flit to extract the version and description from our __init__.py file.\n[build-system]\nrequires = [\"flit\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[project]\nname = \"simulation\"\ndynamic = [\"version\", \"description\"]\n\nOur directory is now recognisable as a package - it contains an __init__.py file, and there is information about the package in pyproject.toml.\nYour directory should now look like this:\nour_directory/\n‚îú‚îÄ‚îÄ simulation/             # Main package directory\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py         # Makes the directory a package\n‚îÇ   ‚îî‚îÄ‚îÄ model.py            # Our function\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ environment.yaml\n‚îú‚îÄ‚îÄ LICENSE\n‚îú‚îÄ‚îÄ pyproject.toml          # Package metadata\n‚îî‚îÄ‚îÄ README.md",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#update-the-environment",
    "href": "pages/setup/package.html#update-the-environment",
    "title": "Structuring our model as a package",
    "section": "Update the environment",
    "text": "Update the environment\n\n1. Add package to environment file. Edit the environment.yaml file created in Dependency management to add the local package. We use the -e flag to install it in ‚Äúeditable‚Äù mode, which means it will update with any changes to the source code in simulation/.\nWe add the following line within the pip installs:\n  - pip:\n    - -e .[dev]\nSo our full environment file is now:\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - ipykernel=6.29.5\n  - jinja2=3.1.5\n  - joblib=1.4.2\n  - nbconvert=7.16.6\n  - nbformat=5.10.4\n  - nbqa=1.9.0\n  - numpy=2.2.2\n  - pandas=2.2.3\n  - pip=25.0\n  - plotly_express=0.4.1\n  - pylint=3.3.4\n  - pytest=8.3.4\n  - pytest-xdist=3.6.1\n  - python=3.13.1\n  - rich=13.9.4\n  - simpy=4.1.1\n  - pip:\n    - kaleido==0.2.1\n    - sim-tools==0.8.0\n    - -e .[dev]\n\n2. Update the environment. To update our environment, adding our new package, execute the following in the command line (after running conda activate des-example):\nconda env update --file environment.yaml --prune\nIf you run conda list, you should now see our simulation package listed as a dependency like so:\n# Name                    Version                   Build  Channel\nsimulation                0.1.0                    pypi_0    pypi",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#create-a-notebook-to-test-your-package",
    "href": "pages/setup/package.html#create-a-notebook-to-test-your-package",
    "title": "Structuring our model as a package",
    "section": "Create a notebook to test your package",
    "text": "Create a notebook to test your package\nWe will run our model and analyse results within Jupyter notebooks, as they allow us to combine code, results and explanations in one document. This can help make our methods and results easier to share, read through and understand.\n\n1. Create directory and notebook. We create a dedicated directory for our notebooks in the project root (notebooks/), and add a notebook (simulation_test.ipynb). These can be created via your operating system‚Äôs file manager, or with the command line:\nmkdir notebooks\ntouch notebooks/simulation_test.ipynb\n\n2. Check our package works. Open notebooks/simulation_test.ipynb and add the following code. This will test that we are able to import our package and use the basic function we had created.\n# Import our simulation package\nfrom simulation.model import run_simulation\n\n# Run the simulation with default parameters\nresults = run_simulation()\nprint(f\"Simulation completed with duration: {results['duration']}\")\nprint(f\"Results: {results['results']}\")\n\n# Run with a different duration\nlong_results = run_simulation(duration=200)\nprint(f\"Longer simulation completed with duration: {long_results['duration']}\")\nprint(f\"Number of results: {len(long_results['results'])}\")\nWhen you run the cell, you should see an output confirming that the simulation function runs and returns results, if everything is set up correctly.\nSimulation completed with duration: 100\nResults: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\nLonger simulation completed with duration: 200\nNumber of results: 20",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#summary",
    "href": "pages/setup/package.html#summary",
    "title": "Structuring our model as a package",
    "section": "Summary",
    "text": "Summary\nTo structure your simulation project as a python package:\n\nPlace all core python functions in the simulation/ directory (e.g.¬†model.py).\nCreate simulation/__init__.py and pyproject.toml to set-up as a package.\nOrganise analysis into a seperate directory (e.g.¬†notebooks/).\n\nFor example:\nour_directory/\n‚îú‚îÄ‚îÄ simulation/             # Main package directory\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py         # Makes the directory a package\n‚îÇ   ‚îî‚îÄ‚îÄ model.py            # Our function\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ environment.yaml\n‚îú‚îÄ‚îÄ LICENSE\n‚îú‚îÄ‚îÄ pyproject.toml          # Package metadata\n‚îî‚îÄ‚îÄ README.md",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#further-information",
    "href": "pages/setup/package.html#further-information",
    "title": "Structuring our model as a package",
    "section": "Further information",
    "text": "Further information\n\n‚ÄúHow I use Python to organize my data analyses‚Äù from Joshua Cook 2024",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#required-packages",
    "href": "pages/setup/package.html#required-packages",
    "title": "Structuring our model as a package",
    "section": "Required packages",
    "text": "Required packages\nFor this section, you will need roxygen2, usethis and devtools. If you used the environment provided in Dependency management then you should have these already - but if you do not, make sure to install them! You can check if they are in your environment by running this command from the R console:\npackageVersion(\"devtools\")\npackageVersion(\"usethis\")\npackageVersion(\"roxygen2\")\nIf will print the version number of each package if installed.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#create-the-r-package-structure",
    "href": "pages/setup/package.html#create-the-r-package-structure",
    "title": "Structuring our model as a package",
    "section": "Create the R package structure",
    "text": "Create the R package structure\nFirst, let‚Äôs create the basic directory structure for our simulation package.\n\n1. Create folder Create a folder called R/ in your project directory - for example, by running this command in the terminal:\nmkdir R\n\n2. Add a .R file with a function. Within R/, create a file called model.R.\ntouch R/model.R\nIn this file, we will add our model code. For now, just copy in this simple function that generates a list of numbers. We will add some real code for our model later.\n# Core simulation model functionality\n\nrun_simulation &lt;- function(duration = 100) {\n  #' Run a simple dummy simulation for the specified duration.\n  #'\n  #' @param duration int. The length of time to run the simulation.\n  #' @return list. Dummy simulation results.\n  \n  results &lt;- seq(0, duration - 1)\n  results &lt;- results[results %% 10 == 0]\n  \n  return(list(\n    duration = duration,\n    status = \"completed\",\n    results = results\n  ))\n}\n\n3. Make a DESCRIPTION file. If you have worked through the Dependency management page, then you should already have a DESCRIPTION file listing dependencies, though this step will walk you through more of the meta-data in that file important when structuring our work as a package.\nIf you haven‚Äôt already, then create a DESCRIPTION file by running this command in the terminal:\ntouch DESCRIPTION\nOpen the file and copy in the template below. This is similar to the standard template generated by usethis::use_description(), but with a few extra sections.\nPackage: packagename\nType: Package\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nURL: ...\nAuthors@R: \n    person(\"First\", \"Last\", , \"first.last@example.com\", role = c(\"aut\", \"cre\"))\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.0.0\nImports:\n    ...\nSuggests:\n    ...\nWe will then fill in the template with relevant information for our project. You don‚Äôt need to change Type, Encoding, or Roxygen. For the other arguments:\n\nPackage: When using devtools to work with our package (as below), it will prompt you to use a name that complies with CRAN (the main R package repository). They require that the name is only made up of letters, numbers and periods (.) - and that it must start with a letter and cannot end with a period. When structuring our research project as a package, this is not often with the aim of uploading it to CRAN, but it can be simple/good practice to follow these guidelines anyway, and means you avoid devtools error messages! \nTitle: Capitalised single line description of the package which does not end with a period (.).\nVersion: The package version. For R packages, this is usually set to 0.0.0.9000 during early development - though some developers prefer to set it to 0.1.0, as we have done. The version number is used to track changes to the package over time. It typically follows semantic versioning, with three numbers representing major, minor and patch changes. For more about how and when to update the version, see the Changelog page.\nAuthors: List of author names, emails and roles. The main role options are the current maintainer (creator, cre), people who have made significant contributions (author, aut), those who have made smaller contributions (contributor, ctb), copyright holders (cph) and funders (fnd). You can add additional information using the comment argument, like your ORCID ID.\nURL: Link to your repository. If you don‚Äôt have one, we‚Äôd strongly recommend making one - check out the Version control and Git page.\nDescription: Single paragraph describing project.\nLicense: A license tells others how they can use your code. The usethis package makes it easy to add a license: just call the function for your chosen license, for example:\nusethis::use_mit_license()\nThis will update the License field in DESCRIPTION and create both LICENSE (with the year and copyright holder) and LICENSE.md (with the full licence text). Note: it will prompt you to overwrite any existing licence files.\nR packages use this two-file structure, while GitHub typically expects a single LICENSE file containing the full text. Unless you plan to submit to CRAN - which requires the R package structure - either approach is fine. For simplicity, we recommend sticking with the standard R package setup using usethis, and agreeing if prompted to overwrite old license files.\nFor more information, see the Licensing page in this book, and the R Packages book.\nRoxygenNote: roxygen2 is used when documenting code. Update this to the version of roxygen2 which you have installed - to check, run:\npackageVersion(\"roxygen2\")\nImports: These are packages necessary for your package. In other words, if it‚Äôs used by code in R/, then list it here.\nSuggests: These are any other packages needed. For example, you might include those for development (devtools), testing (testthat), linting (lintr) - or packages used in your analysis (i.e.¬†any code not in R/).\n\nAs an example:\nPackage: simulation\nType: Package\nTitle: Simulation\nVersion: 0.1.0\nAuthors@R: c(\n    person(\n      \"Amy\", \"Heather\",\n      email = \"a.heather2@exeter.ac.uk\",\n      role = c(\"aut\", \"cre\"),\n      comment = c(ORCID = \"0000-0002-6983-2759\")\n    )\n  )\nURL: https://github.com/pythonhealthdatascience/rap_template_r_des\nDescription: Template reproducible analytical pipeline (RAP) for simple R\n    discrete-event simulation (DES) model.\nLicense: MIT + file LICENSE\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.3.2\nImports:\n    simmer,\n    magrittr,\n    dplyr,\n    purrr,\n    rlang,\n    tidyr,\n    tidyselect,\n    future,\n    future.apply,\n    ggplot2,\n    tibble,\n    gridExtra,\n    R6\nSuggests:\n    testthat (&gt;= 3.0.0),\n    patrick,\n    lintr,\n    devtools,\n    xtable,\n    data.table,\n    mockery\nConfig/testthat/edition: 3",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#use-devtools-to-build-documentation-and-run-checks",
    "href": "pages/setup/package.html#use-devtools-to-build-documentation-and-run-checks",
    "title": "Structuring our model as a package",
    "section": "Use devtools to build documentation and run checks",
    "text": "Use devtools to build documentation and run checks\n1. Build package documentation. The function we created in model.R had a docstring (for more info on writing docstrings, see Docstrings). We can create the documentation for this by calling:\ndevtools::document()\nThis will create:\n\nman/: folder with roxygen2 documentation for each function in package.\nNAMESPACE: file which will list all the functions and packages used within your package.\n\n\n2. Check the package. You can check that the package is set-up correctly by running:\ndevtools::check()\nThis will load it and perform standard checks. If all is well, you should get an output similar to:\n&gt; devtools::check()\n‚ïê‚ïê Documenting ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n‚Ñπ Updating simulation documentation\n‚Ñπ Loading simulation\nWriting NAMESPACE\nWriting run_simulation.Rd\n\n‚ïê‚ïê Building ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nSetting env vars:\n‚Ä¢ CFLAGS    : -Wall -pedantic -fdiagnostics-color=always\n‚Ä¢ CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always\n‚Ä¢ CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always\n‚Ä¢ CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always\n‚Ä¢ CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always\n‚Ä¢ CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always\n‚îÄ‚îÄ R CMD build ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚úî  checking for file ‚Äò/home/amy/Documents/stars/hospital-des-r/DESCRIPTION‚Äô ...\n‚îÄ  preparing ‚Äòsimulation‚Äô:\n‚úî  checking DESCRIPTION meta-information ...\n‚îÄ  checking for LF line-endings in source and make files and shell scripts\n‚îÄ  checking for empty or unneeded directories\n‚îÄ  building ‚Äòsimulation_0.1.0.tar.gz‚Äô\n   \n‚ïê‚ïê Checking ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\nSetting env vars:\n‚Ä¢ _R_CHECK_CRAN_INCOMING_USE_ASPELL_           : TRUE\n‚Ä¢ _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE\n‚Ä¢ _R_CHECK_CRAN_INCOMING_                      : FALSE\n‚Ä¢ _R_CHECK_FORCE_SUGGESTS_                     : FALSE\n‚Ä¢ _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE\n‚Ä¢ NOT_CRAN                                     : true\n‚îÄ‚îÄ R CMD check ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚îÄ  using log directory ‚Äò/tmp/RtmpyQepIc/file4b07699e20de/simulation.Rcheck‚Äô\n‚îÄ  using R version 4.4.1 (2024-06-14)\n‚îÄ  using platform: x86_64-pc-linux-gnu\n‚îÄ  R was compiled by\n       gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\n       GNU Fortran (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\n‚îÄ  running under: Ubuntu 24.04.2 LTS\n‚îÄ  using session charset: UTF-8\n‚îÄ  using options ‚Äò--no-manual --as-cran‚Äô\n‚úî  checking for file ‚Äòsimulation/DESCRIPTION‚Äô\n‚îÄ  this is package ‚Äòsimulation‚Äô version ‚Äò0.1.0‚Äô\n‚îÄ  package encoding: UTF-8\n‚úî  checking package namespace information\n‚úî  checking package dependencies (1.4s)\n‚úî  checking if this is a source package ...\n‚úî  checking if there is a namespace\n‚úî  checking for executable files\n‚úî  checking for hidden files and directories\n‚úî  checking for portable file names\n‚úî  checking for sufficient/correct file permissions\n‚úî  checking serialization versions\n‚úî  checking whether package ‚Äòsimulation‚Äô can be installed (771ms)\n‚úî  checking installed package size ...\n‚úî  checking package directory\n‚úî  checking for future file timestamps\n‚úî  checking DESCRIPTION meta-information ...\n‚úî  checking top-level files\n‚úî  checking for left-over files\n‚úî  checking index information\n‚úî  checking package subdirectories ...\n‚úî  checking code files for non-ASCII characters ...\n‚úî  checking R files for syntax errors ...\n‚úî  checking whether the package can be loaded ...\n‚úî  checking whether the package can be loaded with stated dependencies ...\n‚úî  checking whether the package can be unloaded cleanly ...\n‚úî  checking whether the namespace can be loaded with stated dependencies ...\n‚úî  checking whether the namespace can be unloaded cleanly ...\n‚úî  checking loading without being on the library search path ...\nN  checking dependencies in R code ...\n   Namespaces in Imports field not imported from:\n     ‚ÄòR6‚Äô ‚Äòdplyr‚Äô ‚Äòfuture‚Äô ‚Äòfuture.apply‚Äô ‚Äòggplot2‚Äô ‚ÄògridExtra‚Äô ‚Äòmagrittr‚Äô\n     ‚Äòpurrr‚Äô ‚Äòrlang‚Äô ‚Äòsimmer‚Äô ‚Äòtibble‚Äô ‚Äòtidyr‚Äô ‚Äòtidyselect‚Äô\n     All declared Imports should be used.\n‚úî  checking S3 generic/method consistency ...\n‚úî  checking replacement functions ...\n‚úî  checking foreign function calls ...\n‚úî  checking R code for possible problems (1.5s)\n‚úî  checking Rd files ...\n‚úî  checking Rd metadata ...\n‚úî  checking Rd line widths ...\n‚úî  checking Rd cross-references ...\n‚úî  checking for missing documentation entries ...\n‚úî  checking for code/documentation mismatches (343ms)\n‚úî  checking Rd \\usage sections ...\n‚úî  checking Rd contents ...\n‚úî  checking for unstated dependencies in examples ...\n‚îÄ  checking examples ... NONE\n‚úî  checking for non-standard things in the check directory\n‚úî  checking for detritus in the temp directory\n   \n   See\n     ‚Äò/tmp/RtmpyQepIc/file4b07699e20de/simulation.Rcheck/00check.log‚Äô\n   for details.\n   \n‚îÄ‚îÄ R CMD check results ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ simulation 0.1.0 ‚îÄ‚îÄ‚îÄ‚îÄ\nDuration: 7.3s\n\n‚ùØ checking dependencies in R code ... NOTE\n  Namespaces in Imports field not imported from:\n    ‚ÄòR6‚Äô ‚Äòdplyr‚Äô ‚Äòfuture‚Äô ‚Äòfuture.apply‚Äô ‚Äòggplot2‚Äô ‚ÄògridExtra‚Äô ‚Äòmagrittr‚Äô\n    ‚Äòpurrr‚Äô ‚Äòrlang‚Äô ‚Äòsimmer‚Äô ‚Äòtibble‚Äô ‚Äòtidyr‚Äô ‚Äòtidyselect‚Äô\n    All declared Imports should be used.\n\n0 errors ‚úî | 0 warnings ‚úî | 1 note ‚úñ\nThe note in this case is because we are importing packages not currently used in R/ - but won‚Äôt worry about this for now, as will do later when build our simulation model.\n\n3. Install the package. We can also verify that our package is working by trying to install it. From the console, run:\ndevtools::install()",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#create-a-.rmd-file-to-test-your-package",
    "href": "pages/setup/package.html#create-a-.rmd-file-to-test-your-package",
    "title": "Structuring our model as a package",
    "section": "Create a .Rmd file to test your package",
    "text": "Create a .Rmd file to test your package\nWe will run our model and analyse results within R markdown (.Rmd) files, as they combine code, results and explanations in one document. This can help make our methods and results easier to share, read through and understand.\n\n1. Create directory and R markdown file. We create a dedicated directory for our R markdown files in the project root (rmarkdown/), and add a file (simulation_test.Rmd). These can be created via the terminal by running:\nmkdir rmarkdown\ntouch rmarkdown/simulation_test.Rmd\nAs part of an R package, you can create a vignettes folder, which is typically used to hold guides, tutorials, or extended examples demonstrating how to use the package. Some people suggest putting your analysis in vignettes/, as this ensures everything is run from scratch each time you call devtools::check(), helping maintain reproducibility.\nHowever, we usually prefer to use an rmarkdown/ folder when structuring research as a package because running analyses as vignettes is very inefficient for simulations with longer run times, and saving outputs from vignettes can lead to file path errors during the package build process.\n\n2. Check our package works. Open rmarkdown/simulation_test.Rmd and add the following code into a cell. This means you put ```{r} in the line before the code, and ``` in the line after.\nThis code will test that we are able to import our package and use the basic function we had created.\n# Load the package from the local directory\ndevtools::load_all()\n\n# Load the package\nlibrary(simulation)\n\n# Run the simulation with default parameters\nresults &lt;- run_simulation()\ncat(sprintf(\"Simulation completed with duration: %s\\n\", results$duration))\ncat(sprintf(\"Results: %s\\n\", toString(results$results)))\n\n# Run with a different duration\nlong_results &lt;- run_simulation(duration = 200)\ncat(sprintf(\"Longer simulation completed with duration: %s\\n\", long_results$duration))\ncat(sprintf(\"Number of results: %d\\n\", length(long_results$results)))\nWhen you run the cell, you should see an output confirming that the simulation function runs and returns results, if everything is set up correctly.\n‚Ñπ Loading simulation\nSimulation completed with duration: 100\nResults: 0, 10, 20, 30, 40, 50, 60, 70, 80, 90\nLonger simulation completed with duration: 200\nNumber of results: 20",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#summary-1",
    "href": "pages/setup/package.html#summary-1",
    "title": "Structuring our model as a package",
    "section": "Summary",
    "text": "Summary\nTo structure your simulation project as an R package:\n\nPlace all core R functions in the R/ directory (e.g.¬†model.R).\nCreate a DESCRIPTION file to define package metadata.\nUse devtools and roxygen2 to generate documentation (man/, NAMESPACE) and check your package.\nOrganise analysis into a seperate directory (e.g.¬†rmarkdown/).\n\nFor example:\nour_directory/\n‚îú‚îÄ‚îÄ R/                  # Directory containing R functions\n‚îÇ   ‚îú‚îÄ‚îÄ model.R         # Code (e.g. for the model)\n‚îÇ   ‚îî‚îÄ‚îÄ ...             # Other .R files\n‚îú‚îÄ‚îÄ man/                # Documentation (generated from roxygen comments)\n‚îú‚îÄ‚îÄ DESCRIPTION         # Package metadata\n‚îú‚îÄ‚îÄ NAMESPACE           # Package exports (usually generated)\n‚îî‚îÄ‚îÄ rmarkdown/          # Analysis notebooks\n\n\nFurther information\n\n‚ÄúOpen, Reproducible, and Distributable Research With R Packages‚Äù from the DANTE Project - for example, this page on vignettes.\n‚ÄúSharing and organizing research products as R packages‚Äù from Vuorre and Crump 2020\n‚Äú4 Fundamental development workflows‚Äù from the ‚ÄúR Packages‚Äù book by Hadley Wickham and Jennifer Bryan\n‚Äú9 DESCRIPTION‚Äù from the ‚ÄúR Packages‚Äù book by Hadley Wickham and Jennifer Bryan",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/code_structure.html",
    "href": "pages/setup/code_structure.html",
    "title": "Code organisation",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025: Minimise code duplication.\nNHS Levels of RAP (ü•à): Reusable functions and/or classes are used where appropriate.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Code organisation</span>"
    ]
  },
  {
    "objectID": "pages/model/parameters.html",
    "href": "pages/model/parameters.html",
    "title": "Parameter management",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025: Avoid hard-coded parameters.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Parameter management</span>"
    ]
  },
  {
    "objectID": "pages/model/distributions.html",
    "href": "pages/model/distributions.html",
    "title": "Sampling distributions and seeds",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025: Control randomness.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Sampling distributions and seeds</span>"
    ]
  },
  {
    "objectID": "pages/model/logs.html",
    "href": "pages/model/logs.html",
    "title": "Logs",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Logs are automatically recorded by the pipeline to ensure outputs are as expected.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Logs</span>"
    ]
  },
  {
    "objectID": "pages/execution/outputs.html",
    "href": "pages/execution/outputs.html",
    "title": "Outputs",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Include code to calculate all required model outputs\nHeather et al.¬†2025: Ensure clarity and consistency in the model results tables.\nNHS Levels of RAP (ü•à): Data is handled and output in a Tidy data format.",
    "crumbs": [
      "Model execution",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Outputs</span>"
    ]
  },
  {
    "objectID": "pages/execution/parallel.html",
    "href": "pages/execution/parallel.html",
    "title": "Parallel processing",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025: Optimise model run time.",
    "crumbs": [
      "Model execution",
      "<span class='chapter-number'>17</span>¬† <span class='chapter-title'>Parallel processing</span>"
    ]
  },
  {
    "objectID": "pages/analysis/tables_figures.html",
    "href": "pages/analysis/tables_figures.html",
    "title": "Producing tables and figures",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Include code to generate the tables, figures, and other reported results.\nHeather et al.¬†2025: Save outputs to a file.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>18</span>¬† <span class='chapter-title'>Producing tables and figures</span>"
    ]
  },
  {
    "objectID": "pages/analysis/scenarios.html",
    "href": "pages/analysis/scenarios.html",
    "title": "Scenarios and sensitivity analysis",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Provide code for all scenarios and sensitivity analyses.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>19</span>¬† <span class='chapter-title'>Scenarios and sensitivity analysis</span>"
    ]
  },
  {
    "objectID": "pages/analysis/full_run.html",
    "href": "pages/analysis/full_run.html",
    "title": "Full run",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Ensure model parameters are correct.\nNHS Levels of RAP (ü•à): Outputs are produced by code with minimal manual intervention.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Full run</span>"
    ]
  },
  {
    "objectID": "pages/quality/docstrings.html",
    "href": "pages/quality/docstrings.html",
    "title": "Docstrings",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025: Comment sufficiently.\nNHS Levels of RAP (ü•à): Code is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>21</span>¬† <span class='chapter-title'>Docstrings</span>"
    ]
  },
  {
    "objectID": "pages/quality/linting.html",
    "href": "pages/quality/linting.html",
    "title": "Linting",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Code adheres to agreed coding standards (e.g PEP8, style guide for Pyspark).",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>22</span>¬† <span class='chapter-title'>Linting</span>"
    ]
  },
  {
    "objectID": "pages/quality/tests.html",
    "href": "pages/quality/tests.html",
    "title": "Tests",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Pipeline includes a testing framework (unit tests, back tests).",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>23</span>¬† <span class='chapter-title'>Tests</span>"
    ]
  },
  {
    "objectID": "pages/quality/github_actions.html",
    "href": "pages/quality/github_actions.html",
    "title": "GitHub actions",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nNHS Levels of RAP (ü•á): Repository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g.¬†GitHub Actions.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>24</span>¬† <span class='chapter-title'>GitHub actions</span>"
    ]
  },
  {
    "objectID": "pages/quality/peer_review.html",
    "href": "pages/quality/peer_review.html",
    "title": "Peer review",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Code has been peer reviewed.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>25</span>¬† <span class='chapter-title'>Peer review</span>"
    ]
  },
  {
    "objectID": "pages/sharing/documentation.html",
    "href": "pages/sharing/documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025: Include run instructions.\nHeather et al.¬†2025: State run times and machine specifications.\nNHS Levels of RAP (ü•â): Repository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code (use NHS Open Source Policy section on Readmes as a guide).\nNHS Levels of RAP (ü•à): Code is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>26</span>¬† <span class='chapter-title'>Documentation</span>"
    ]
  },
  {
    "objectID": "pages/sharing/licence.html",
    "href": "pages/sharing/licence.html",
    "title": "Licensing",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Share code with an open licence.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>27</span>¬† <span class='chapter-title'>Licensing</span>"
    ]
  },
  {
    "objectID": "pages/sharing/archive.html",
    "href": "pages/sharing/archive.html",
    "title": "Sharing and archiving the model",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Code is published in the open and linked to & from accompanying publication (if relevant).",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>28</span>¬† <span class='chapter-title'>Sharing and archiving the model</span>"
    ]
  },
  {
    "objectID": "pages/sharing/changelog.html",
    "href": "pages/sharing/changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "üîó Reproducibility guidelines:\n\nHeather et al.¬†2025: Link publication to a specific version of the code.\nNHS Levels of RAP (ü•á): Changes to the RAP are clearly signposted. E.g. a changelog in the package, releases etc.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>30</span>¬† <span class='chapter-title'>Changelog</span>"
    ]
  }
]