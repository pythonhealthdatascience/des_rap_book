[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Discrete-Event Simulation in Python and R",
    "section": "",
    "text": "This book is a step-by-step guide to writing reproducible discrete-event simulation models in Python and R.\nIt guides you through creating these models whilst meeting reproducibility requirements from:\n\nüåø Heather et al.¬†2025 ‚ÄúOn the reproducibility of discrete-event simulation studies in health research: an empirical study using open models‚Äù\nüè• The ‚ÄúLevels of RAP‚Äù framework from the NHS RAP Community of Practice\n\nThese are described further in Reproducibility guidelines: Reproducibility guidelines.\nThe models are created using:\n\nSimPy for Python - https://simpy.readthedocs.io/en/latest/.\nsimmer for R - https://r-simmer.org/.\n\nThis book uses healthcare discrete-event simulation models as its primary case study - modelling patient flows and resource allocation in clinical settings. However, the reproducibility principles and coding practices can be applied in other fields and for other modelling and analysis techniques.\nIt has been developed as part of the STARS project:\n\nAll code in this book is provided under the MIT licence. The accompanying text is licensed under a Creative Commons Attribution-ShareAlike 4.0 International license.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html",
    "href": "pages/intro/guidelines.html",
    "title": "Reproducibility guidelines",
    "section": "",
    "text": "Reproducibility recommendations from Heather et al.¬†2025\nThere‚Äôs lots of guidance to support reproducible research. This book focuses specifically on healthcare discrete-event simulation (DES) models, drawing from two particularly relevant frameworks:\nThis book walks through how to address all aspects of these guidelines, and the links below (üîó) take you to relevant pages with detailed guidance on each topic.\nAs part of the project STARS (Sharing Tools and Artefacts for Reproducible Simulations), a series of computational reproducibility assessments were conducted by Heather et al.¬†2025. From these, several recommendations were shared to support reproducibility of healthcare discrete-event simulation (DES) models, as described in:\nThose marked with a star (‚≠ê) were identified as having the greatest impact in Heather et al.¬†2025.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "href": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "title": "Reproducibility guidelines",
    "section": "",
    "text": "Heather, A. Monks, T. Harper, A. Mustafee, N. Mayne, A. On the reproducibility of discrete-event simulation studies in health research: an empirical study using open models (2025). arxiv. https://doi.org/10.48550/arXiv.2501.13137.\n\n\n\nRecommendations to support reproduction\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nSet-up\n\n\n\nShare code with an open licence ‚≠ê\nLicensing\n\n\nLink publication to a specific version of the code\nChangelog\n\n\nList dependencies and versions\nDependency management\n\n\nRunning the model\n\n\n\nProvide code for all scenarios and sensitivity analyses ‚≠ê\nScenarios and sensitivity analysis\n\n\nEnsure model parameters are correct ‚≠ê\nFull run\n\n\nControl randomness\nSampling distributions and seeds\n\n\nOutputs\n\n\n\nInclude code to calculate all required model outputs ‚≠ê\nOutputs\n\n\nInclude code to generate the tables, figures, and other reported results ‚≠ê\nProducing tables and figures\n\n\n\n\n\nRecommendations to support troubleshooting and reuse\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nDesign\n\n\n\nSeparate model code from applications\n‚ùì\n\n\nAvoid hard-coded parameters\nParameter management\n\n\nMinimise code duplication\nCode organisation\n\n\nClarity\n\n\n\nComment sufficiently\nDocstrings\n\n\nEnsure clarity and consistency in the model results tables\nOutputs\n\n\nInclude run instructions\nDocumentation\n\n\nState run times and machine specifications\nDocumentation\n\n\nFunctionality\n\n\n\nOptimise model run time\nParallel processing\n\n\nSave outputs to a file\nProducing tables and figures\n\n\nAvoid excessive output files\n‚ùì\n\n\nAddress large file sizes\n‚ùì",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "href": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "title": "Reproducibility guidelines",
    "section": "‚ÄòLevels of RAP‚Äô Maturity Framework",
    "text": "‚ÄòLevels of RAP‚Äô Maturity Framework\nThe following framework has been directly copied from the RAP Community of Practice repository/website: NHS RAP Levels of RAP Framework.\nThis framework is maintained by the NHS RAP Community of Practice and is ¬© 2024 Crown Copyright (NHS England), shared by them under the terms of the Open Government 3.0 licence.\nThe specific version of the framework copied below is that from commit 2549256 (9th September 2024).\n\nü•â Baseline\nRAP fundamentals offering resilience against future change.\n\n\n\nCriteria\nChapter\n\n\n\n\nData produced by code in an open-source language (e.g., Python, R, SQL).\nFree and open source software (FOSS)\n\n\nCode is version controlled (see Git basics and using Git collaboratively guides).\nVersion control and Git\n\n\nRepository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code (use NHS Open Source Policy section on Readmes as a guide).\nDocumentation\n\n\nCode has been peer reviewed.\nPeer review\n\n\nCode is published in the open and linked to & from accompanying publication (if relevant).\nSharing and archiving the model\n\n\n\n\n\nü•à Silver\nImplementing best practice by following good analytical and software engineering standards.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nOutputs are produced by code with minimal manual intervention.\nFull run\n\n\nCode is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.\nDocumentation Docstrings\n\n\nCode is well-organised following standard directory format.\nStructuring our model as a package\n\n\nReusable functions and/or classes are used where appropriate.\nCode organisation\n\n\nCode adheres to agreed coding standards (e.g PEP8, style guide for Pyspark).\nLinting\n\n\nPipeline includes a testing framework (unit tests, back tests).\nTests\n\n\nRepository includes dependency information (e.g.¬†requirements.txt, PipFile, environment.yml).\nDependency management\n\n\nLogs are automatically recorded by the pipeline to ensure outputs are as expected.\nLogs\n\n\nData is handled and output in a Tidy data format.\nOutputs\n\n\n\n\n\nü•á Gold\nAnalysis as a product to further elevate your analytical work and enhance its reusability to the public.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nCode is fully packaged.\nStructuring our model as a package\n\n\nRepository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g.¬†GitHub Actions.\nGitHub actions\n\n\nProcess runs based on event-based triggers (e.g., new data in database) or on a schedule.\nN/A\n\n\nChanges to the RAP are clearly signposted. E.g. a changelog in the package, releases etc. (See gov.uk info on Semantic Versioning).\nChangelog",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/foss.html",
    "href": "pages/intro/foss.html",
    "title": "Free and open source software (FOSS)",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Data produced by code in an open-source language (e.g., Python, R, SQL).",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Free and open source software (FOSS)</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html",
    "href": "pages/setup/version.html",
    "title": "Version control and Git",
    "section": "",
    "text": "Version control\nVersion control is a way to track changes to your documents over time. You can:\nThis is super handy, whether you‚Äôre working by yourself or in a team!\nüí° Recommendation: Using version control from the start of the project.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#version-control",
    "href": "pages/setup/version.html#version-control",
    "title": "Version control and Git",
    "section": "",
    "text": "Track changes to files: see what changes, when it changed, and who changed it.\n‚ÄúRoll back‚Äù to earlier versions of your files if something goes wrong.\nWork simultaneously with others without overwriting each other.\nTry new ideas without risking your main work.\nBack up and share work online using platforms like GitHub.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#git",
    "href": "pages/setup/version.html#git",
    "title": "Version control and Git",
    "section": "Git",
    "text": "Git\nThe most popular version control system is Git.\nWhen using Git, we refer to our work as a repository. This is simply a folder containing your project files, as well as a special hidden .git/ folder which stores all the version history.\nWe take snapshots of the files at specific points in time, and these are called commits.\nGit can just be used on your local computer, but most people will use an online platform to store their repositories. The most popular options are:\n\nGitHub - https://github.com/.\nGitLab - https://gitlab.com/.\nGBitBucket - https://bitbucket.org/.\n\nThis tutorial will focus on GitHub as it is the most widely used and beginner-friendly.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#setting-up-a-github-repository",
    "href": "pages/setup/version.html#setting-up-a-github-repository",
    "title": "Version control and Git",
    "section": "Setting up a GitHub repository",
    "text": "Setting up a GitHub repository\n1. Create an account. Go to https://github.com/signup and sign up with your email and a username.\n\n2. Create a new repository. Click the ‚Äú+‚Äù button in the top right corner, and select ‚ÄúNew repository‚Äù.\n\n\n\n\n\nThen fill out the form to create a repository‚Ä¶\n\nRepository name: e.g.¬†emergency-des\nDescription: e.g.¬†Discrete-event simulation of a hospital emergency department.\nVisibility: Choose whether to make the repository public (anyone can see it) or private (only visible to you and people your invite).\nREADME: Select ‚ÄúAdd a README file‚Äù, which will create a blank README we can populate later (see Documentation).\n.gitignore: Select the ‚ÄúPython‚Äù or ‚ÄúR‚Äù .gitignore template. This will create a .gitignore file in your repository that tells Git which files not to track.\nLicence: Select an appropriate licence for your repository (see Licensing for more information and advice).\n\n\n\n\n\n\n\nSharing your work openly\n\n\n\nWe would encourage you to make your work open access - i.e.¬†creating a public GitHub repository, and using a permissive open licence (e.g.¬†MIT). As described by The Turing Way, benefits to making your work open include:\n\nSharing: Easy to reference and share in papers and presentations.\nTransparency: Clearly shows how you conducted your analyses.\nReproducibility: Others can verify and reproduce your results.\nQuality: Knowing it‚Äôs public encourages good practice.\nReuse and learning: Others can learn from and build on your work, reducing research waste.\nExtends impact: Your work can continue to have impact after the project ends. This could include for you, if you change jobs, and want to be able to look back on old code!\nCollaboration: Creates opportunities for collaboration, if others come across your code and are interested in working together.\nFunder requirements: For research projects, some grants now mandate open code.\n\nIncluding a license (Licensing) and citation instructions (Citation guidance) enables others to use your code while giving you credit.\nThat said, it‚Äôs your code and your choice - if you have specific concerns or proprietary work, a private repository is always an option.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#cloning-the-repository",
    "href": "pages/setup/version.html#cloning-the-repository",
    "title": "Version control and Git",
    "section": "Cloning the repository",
    "text": "Cloning the repository\nYou have created a remote repository on GitHub - we now want to clone it, which means we create a local copy on your computer, and can sync between the local and remote repositories.\n1. Get the URL. On the main page of you repository, click the green ‚Äú&lt;&gt; Code‚Äù button, then copy the HTTPS url.\n\n2. Clone the repository. Depending on your operating system, open either the terminal (Linux or Mac) or Git Bash (windows). Navigate to the location where you would like to create the folder containing your repository. Then enter git clone and the pasted URL - for example:\ngit clone https://github.com/amyheather/hospital-des.git\n\nThis will have created a local copy of the repository, which you can open with your preferred development environment (e.g.¬†VSCode, RStudio).",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#creating-a-branch-and-pushing-changes",
    "href": "pages/setup/version.html#creating-a-branch-and-pushing-changes",
    "title": "Version control and Git",
    "section": "Creating a branch and pushing changes",
    "text": "Creating a branch and pushing changes\nIt is best practice to work in branches. A branch is like a separate workspace where you can safely experiment with changes without affecting the main project.\nAs in the diagram below, you can make several commits in this branch, and when you‚Äôre ready, merge back into the main project (e.g.¬†when new feature complete, or reached a stable point where everything is working properly).\nThis is valuable even when you‚Äôre the only person working on the repository - but with multiple collaborator, becomes essential! Every person should work on their own branch.\n\nTo work in a branch and push changes‚Ä¶\n1. Create a branch. Open your terminal or Git Bash, and make sure your current working directory is your Git repository. To create a new branch (here, named dev), then run:\ngit branch dev\nTo move into this branch:\ngit checkout dev\nYou should see a message ‚ÄúSwitched to branch ‚Äòdev‚Äô‚Äù.\nWe can add this branch to the remote GitHub repository by running:\ngit push -u origin dev\n2. Make some changes. This could be any changes to code, documentation or other artefacts in the repository. So we can test this out, let‚Äôs make a simple change to our README -\nBefore:\n# hospital-des\nDiscrete-event simulation of a hospital emergency department.\nAfter:\n# Hospital DES\n\nDiscrete-event simulation of a hospital emergency department.\n\nAuthor: Amy Heather\n\nWork in progress!\n3. Commit the changes. To save this new version of our file to Git, we need to commit the changes. We use git add to choose which files to commit. We then write a descriptive commit message using git commit. Finally, we push the changes using git push.\ngit add README.md\ngit commit -m \"docs(README): add author + work-in-progress notice\"\ngit push\n4. Merge the changes. One of the easiest ways to merge changes into main is using the GitHub website. Open your repository. You should see that you now have ‚Äú2 Branches‚Äù. Navigate to your new branch‚Ä¶\n\nWe can see this is now 1 commit ahead of main. We can browse the files in this branch, and can click on the right hand ‚Äú2 Commits‚Äù to view the version history.\n\nThis just has 2 commits - the creation of our repository, and the change to our README file:\n\nTo merge the changes with main, go back to the page for that branch, and select either:\n\n‚ÄúThis branch is 1 commit ahead of main‚Äù, or\n‚ÄúCompare & pull request‚Äù\n\n\nThis will open a page which shows all the new commits in your branch, and side-by-side changes the files you have modified.\nClick the green ‚ÄúCreate pull request‚Äù button.\n\nA pull request is a request to merge changes from one branch to another. This provides an opportunity, for example, for others to review the changes and make sure they are happy before these are merged.\nWe can modify the message - or just leave as is, and select the ‚ÄúCreate pull request‚Äù button.\n\nIf new changes have been made to the main branch since you created your branch (e.g., new commits, merges from other branches, or contributions from other collaborators) and you‚Äôve modified the same files, you may encounter merge conflicts that need to be resolved.\nIf not though, you can just select ‚ÄúMerge pull request‚Äù and then ‚ÄúConfirm merge‚Äù.\n\n\n5. Close your branch. We can now delete the branch-\n\nOn our local machine, switch back to main:\ngit checkout main\nThen pull the updated main branch, which contains our merged changes:\ngit pull\nWe can then delete our local branch:\ngit branch -d dev\nAnd also get the latest list of branches from the remote repository, with our old branch now removed:\ngit remote prune origin\nTo continue working in the repository, simply create a new branch and continue as above.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#github-organisations",
    "href": "pages/setup/version.html#github-organisations",
    "title": "Version control and Git",
    "section": "GitHub organisations",
    "text": "GitHub organisations\nWhen creating a GitHub repository, by default, it will set the owner to be your personal user account. While this works well for person projects, you will often find it better to create repositories within a GitHub organisation instead.\nA GitHub organisation acts like a shared account which multiple people can own, access and collaborate on. Advantages of this are:\n\nOne place for each project/team. Related repositories are grouped into one organisation. For example, you could have different organisations for different teams or projects, with all the relevant repositories for each.\nShared ownership. Multiple people can have administrative access.\nContinuity. If you leave a project, repositories remain accessible to and owned by the team.\nProfessional branding. Repositories appear under the organisation name rather than your personal username.\n\nTo create a GitHub organisation‚Ä¶\n1. Open settings. In the top-right corner, select your profile photo, then click ‚ÄúSettings‚Äù.\n\n\n\n\n\nThen select ‚ÄúOrganizations‚Äù under the Access section in the sidebar.\n\n\n\n\n\n2. Make new organisation. In the top-right corner, select ‚ÄúNew organization‚Äù.\n3. Choose a plan. For example, simply select the Free plan.\n4. Enter your organisation details. It will ask for a name and contact email. You can typically then select that the organisation belongs to your personal account. Follow the prompts to create the organisation. You can then add other GitHub users as owners or collaborators.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html",
    "href": "pages/setup/environment.html",
    "title": "Dependency management",
    "section": "",
    "text": "Dependency management is about keeping track of the environment used for your project. This includes the version of your programming languages, any packages used, and their versions.\nIt acts like a time capsule, allowing you to return to a project later and run it with the exact same packages and versions, reproducing the results generated previously.\nDependency management enables you to isolate environments for different projects. Each project can have it‚Äôs own set of dependencies, preventing conflicts and making it easy to switch between projects.\nIt is also important for collaboration, so that everyone working on the project is using the same environment.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#python-tools-for-dependency-management",
    "href": "pages/setup/environment.html#python-tools-for-dependency-management",
    "title": "Dependency management",
    "section": "Python tools for dependency management",
    "text": "Python tools for dependency management\nThere are lots of tools available for managing dependencies in isolated environments in python. A few of the most popular tools include venv, conda, and poetry.\nIn this book, we will use conda, as it allows us to specify a python version, so each environment we create can have a different specific version of python. This is not possible with venv and poetry, which just manage the package dependencies, and will just use the system python.\n\n\n\n\n\n\nMamba\n\n\n\nMamba is a drop-in replacement for conda that is often preferred as it is:\n\nFaster than conda.\nBetter at dealing with dependency conflicts, providing more helpful messages in cases where environments fail to builds due to clashing requirements of different packages.\n\nTo use mamba, simply replace conda in all the commands below with mamba.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#installing-conda-or-mamba",
    "href": "pages/setup/environment.html#installing-conda-or-mamba",
    "title": "Dependency management",
    "section": "Installing conda (or mamba)",
    "text": "Installing conda (or mamba)\nRefer to the conda or mamba documentation for the latest instructions on installing these for your operating system (windows, mac or linux).\n\nConda installation instructions.\nMamba installation instructions.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#setting-up-our-conda-environment",
    "href": "pages/setup/environment.html#setting-up-our-conda-environment",
    "title": "Dependency management",
    "section": "Setting up our conda environment",
    "text": "Setting up our conda environment\n1. Create an environment file. In the project root, we create üìÑenvironment.yaml.\ntouch environment.yaml\nWithin this file, we add three sections:\n\nName. The environment name.\nChannels. Where to find packages (e.g.¬†conda-forge). \nDependencies. The packages you need.\n\nWhen first creating our environment, we just list the dependencies we know we need at this point - we can always add more later! At the start of a project, you might only know one: python.\nAs an example, we will add simpy and python.\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - python\n  - simpy\n\n2. Build and activate the environment. In the command line, run the following to create your environment:\nconda env create --file environment.yaml\nYou can then activate it (replacing des-example with your environment name):\nconda activate des-example\nTo confirm your environment contains the expected packages, run:\nconda list\nThis will output a list of packages, versions, builds and channels. For example, it may look similar to:\n(des-example) amy@xps:~/Documents/hospital-des$ conda list\n# packages in environment at /home/amy/mambaforge/envs/des-example:\n#\n# Name                    Version                   Build  Channel\n_libgcc_mutex             0.1                 conda_forge    conda-forge\n_openmp_mutex             4.5                       2_gnu    conda-forge\nbzip2                     1.0.8                h4bc722e_7    conda-forge\nca-certificates           2025.1.31            hbd8a1cb_1    conda-forge\nld_impl_linux-64          2.43                 h712a8e2_4    conda-forge\nlibexpat                  2.7.0                h5888daf_0    conda-forge\nlibffi                    3.4.6                h2dba641_1    conda-forge\nlibgcc                    14.2.0               h767d61c_2    conda-forge\nlibgcc-ng                 14.2.0               h69a702a_2    conda-forge\nlibgomp                   14.2.0               h767d61c_2    conda-forge\nliblzma                   5.8.1                hb9d3cd8_0    conda-forge\nlibmpdec                  4.0.0                h4bc722e_0    conda-forge\nlibsqlite                 3.49.1               hee588c1_2    conda-forge\nlibuuid                   2.38.1               h0b41bf4_0    conda-forge\nlibzlib                   1.3.1                hb9d3cd8_2    conda-forge\nncurses                   6.5                  h2d0b736_3    conda-forge\nopenssl                   3.5.0                h7b32b05_0    conda-forge\npip                       25.0.1             pyh145f28c_0    conda-forge\npython                    3.13.3          hf636f53_101_cp313    conda-forge\npython_abi                3.13                    7_cp313    conda-forge\nreadline                  8.2                  h8c095d6_2    conda-forge\nsimpy                     4.1.1              pyhd8ed1ab_1    conda-forge\ntk                        8.6.13          noxft_h4845f30_101    conda-forge\ntzdata                    2025b                h78e105d_0    conda-forge\n\n3. Specify versions. For reproducibility, it‚Äôs best to specify the exact package versions in you environment.yaml. If you‚Äôre starting from scratch, you may not know which versions you need, so you can leave them out initially, as we did in step 1.\nHowever, now that we have built our environment (which used the latest versions as none were specified), it is important to then record your versions in the üìÑenvironment.yaml. These are the versions you saw when running conda list. For example:\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.13.3\n  - simpy=4.1.1\n\n4. Setting up the full environment for this book. When working on a project from scratch, you will often build up your environment organically and iteratively as you find more packages you want to use. However, to follow along with this book and ensure everything works as expected, you can use the full environment provided below. Copy this into your üìÑenvironment.yaml (feel free to alter the name!):\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - ipykernel=6.29.5\n  - jinja2=3.1.5\n  - joblib=1.4.2\n  - nbconvert=7.16.6\n  - nbformat=5.10.4\n  - nbqa=1.9.0\n  - numpy=2.2.2\n  - pandas=2.2.3\n  - pip=25.0\n  - plotly_express=0.4.1\n  - pylint=3.3.4\n  - pytest=8.3.4\n  - pytest-xdist=3.6.1\n  - python=3.13.1\n  - rich=13.9.4\n  - simpy=4.1.1\n  - pip:\n    - kaleido==0.2.1\n    - sim-tools==0.8.0\nThen update your environment to include these packages (after running conda activate des-example) with:\nconda env update --file environment.yaml --prune\n\n\n\nFurther information\n\n‚ÄúAn unbiased evaluation of environment management and packaging tools‚Äù from Anna-Lena Popkes 2024\n‚ÄúPython dependency management is a dumpster fire‚Äù from Niels Cautaerts 2024",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#r-tools-for-dependency-management",
    "href": "pages/setup/environment.html#r-tools-for-dependency-management",
    "title": "Dependency management",
    "section": "R tools for dependency management",
    "text": "R tools for dependency management\n\n\n\n\n\n\nWarning\n\n\n\n‚ö†Ô∏è EVERYTHING BELOW IS WORK IN PROGRESS ‚ö†Ô∏è\n\n\n\nThe most popular tool for managing dependencies in R is renv. This replaced and improved upon the previous tool, Packrat.\nRenv will create isolated environments with the specific packages and their versions for a project. However, it won‚Äôt manage the version of R used - the version of R used is simply whatever is installed on your system.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#setting-up-renv-from-scratch",
    "href": "pages/setup/environment.html#setting-up-renv-from-scratch",
    "title": "Dependency management",
    "section": "Setting up renv from scratch",
    "text": "Setting up renv from scratch\n1. Initialise renv. Run the command below to get started with renv.\nrenv::init()\nThis will add three new files/folders to the project:\n\nrenv/library/: stores packages used in project.\nrenv.lock: record of packages used, so they can be re-installed on a new machine.\n.Rprofile: ensures that renv is activated when open project.\n\n\n2. Create a DESCRIPTION file. While not required, it is good practice to create a DESCRIPTION file. This file is standard for R packages (Structuring our model as a package), but is also helpful for regular projects using renv.\nIt lists the main dependencies in a clear, human-readable way, and can specify versions. This makes it easier to see what packages are required, unlike the verbose renv.lock file, which will list every package (the main packages plus all of their dependencies).\nAs an example, create the file in the project root:\ntouch DESCRIPTION\nThen copy in:\nPackage: simulation\nType: Package\nTitle: Simulation\nVersion: 0.1.0\nAuthors@R: c(\n    person(\n      \"Amy\", \"Heather\",\n      email = \"a.heather2@exeter.ac.uk\",\n      role = c(\"aut\", \"cre\")\n    )\n  )\nURL: https://github.com/pythonhealthdatascience/rap_template_r_des\nDescription: Template reproducible analytical pipeline (RAP) for simple R\n    discrete-event simulation (DES) model.\nLicense: MIT + file LICENSE\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.3.2\nImports:\n    simmer,\n    magrittr,\n    dplyr,\n    purrr,\n    rlang,\n    tidyr,\n    tidyselect,\n    future,\n    future.apply,\n    ggplot2,\n    tibble,\n    gridExtra,\n    R6\nSuggests:\n    testthat (&gt;= 3.0.0),\n    patrick,\n    lintr,\n    devtools,\n    xtable,\n    data.table,\n    mockery\nConfig/testthat/edition: 3\nThese are all dependencies we know we will need for this book. But if you were starting from scratch, would just add what need as go along, and iteratively expand it. \n\n3. Install packages from DESCRIPTION. The command below will install the packages (and their dependencies) into your project library. It will typically install the latest available versions \n\nrenv::install()\n\n4. Save environment to lockfile. Having installed these packages, we then save the current state of the project library to a lock file. This updates renv.lock, which is a record of the exact packages and versions used in the project.\nrenv::snapshot()",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#restoring-a-previous-renv-from-lockfile",
    "href": "pages/setup/environment.html#restoring-a-previous-renv-from-lockfile",
    "title": "Dependency management",
    "section": "Restoring a previous renv from lockfile",
    "text": "Restoring a previous renv from lockfile\n1. Obtain lockfile. If you are attempting to restore an environment from a lockfile, you need to obtain that renv.lock. This provides details on packages and versions to be restored (but not R version). As an example: TBC. \n\n2. Initialise renv. As before, initialise renv for the project. \nrenv::init()\n\n3. Restore the environment. Restore the provided renv based on the lock file. This will install the exact packages listed in the lockfile.\nrenv::restore()",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html#system-dependencies",
    "href": "pages/setup/environment.html#system-dependencies",
    "title": "Dependency management",
    "section": "System dependencies",
    "text": "System dependencies\nSome R packages required external system libraries. The exact requirements will depend on which packages you use, what operating system you have, and whether you have used R before.\nFor example, working on Ubuntu, we found that we had to install the following system dependencies for igraph:\nsudo apt install build-essential gfortran\nsudo apt install libglpk-dev libxml2-dev",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html",
    "href": "pages/setup/package.html",
    "title": "Structuring our model as a package",
    "section": "",
    "text": "Building our simulation model as a package has several advantages:",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#create-the-package-structure",
    "href": "pages/setup/package.html#create-the-package-structure",
    "title": "Structuring our model as a package",
    "section": "Create the package structure",
    "text": "Create the package structure\nFirst, let‚Äôs create the basic directory structure for our simulation package.\n\n1. Create folder. Create a folder called üìÅsimulation/ in your project directory.\nmkdir simulation\n\n2. Make init file. Inside the üìÅsimulation/ folder, create an üìÑ__init__.py file.\ntouch simulation/__init__.py\nOpen this file and copy in some basic metadata.\n\"\"\"SimPy Discrete-Event Simulation (DES) Model.\n\"\"\"\n\n__version__ = \"0.1.0\"\n\n3. Add a function. Within üìÅsimulation/, create a file called üìÑmodel.py.\ntouch simulation/model.py\nIn this, we will add our model code. For now, just copy in this simple function that generates a list of numbers. We will add some real code for our model later.\n\"\"\"Core simulation model functionality.\"\"\"\n\n\ndef run_simulation(duration=100):\n    \"\"\"\n    Run a simple dummy simulation for the specified duration.\n\n    Parameters\n    ----------\n    duration: int\n        The length of time to run the simulation.\n\n    Returns:\n        dict:\n            Dummy simulation results.\n    \"\"\"\n    return {\n        \"duration\": duration,\n        \"status\": \"completed\",\n        \"results\": [i for i in range(duration) if i % 10 == 0]\n    }\n\n4. Make pyproject file. Create a üìÑpyproject.toml file in the project root directory (outside the üìÅsimulation folder).\ntouch pyproject.toml\nCopy the text below into this file. This provides instructions for building the package. We‚Äôre using flit as our build tool because of its simplicity. The dynamic field tells flit to extract the version and description from our üìÑ__init__.py file.\n[build-system]\nrequires = [\"flit\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[project]\nname = \"simulation\"\ndynamic = [\"version\", \"description\"]\n\nOur directory is now recognisable as a package - it contains an üìÑ__init__.py file, and there is information about the package in üìÑpyproject.toml.\nYour directory should now look like this:\nour_directory/\n‚îú‚îÄ‚îÄ simulation/             # Main package directory\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py         # Makes the directory a package\n‚îÇ   ‚îî‚îÄ‚îÄ model.py            # Our function\n‚îú‚îÄ‚îÄ .gitignore\n‚îú‚îÄ‚îÄ environment.yaml\n‚îú‚îÄ‚îÄ LICENSE\n‚îú‚îÄ‚îÄ pyproject.toml          # Package metadata\n‚îî‚îÄ‚îÄ README.md",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#update-the-environment",
    "href": "pages/setup/package.html#update-the-environment",
    "title": "Structuring our model as a package",
    "section": "Update the environment",
    "text": "Update the environment\n\n5. Add package to environment file. Edit the environment.yaml file created in Dependency management to add the local package. We use the -e flag to install it in ‚Äúeditable‚Äù mode, which means it will update with any changes to the source code in üìÅsimulation/.\nWe add the following line within the pip installs:\n  - pip:\n    - -e .[dev]\nSo our full environment file is now:\nname: des-example\nchannels:\n  - conda-forge\ndependencies:\n  - ipykernel=6.29.5\n  - jinja2=3.1.5\n  - joblib=1.4.2\n  - nbconvert=7.16.6\n  - nbformat=5.10.4\n  - nbqa=1.9.0\n  - numpy=2.2.2\n  - pandas=2.2.3\n  - pip=25.0\n  - plotly_express=0.4.1\n  - pylint=3.3.4\n  - pytest=8.3.4\n  - pytest-xdist=3.6.1\n  - python=3.13.1\n  - rich=13.9.4\n  - simpy=4.1.1\n  - pip:\n    - kaleido==0.2.1\n    - sim-tools==0.8.0\n    - -e .[dev]\n\n6. Update the environment. To update our environment, adding our new package, execute the following in the command line (after running conda activate des-example):\nconda env update --file environment.yaml --prune\nIf you run conda list, you should now see our simulation package listed as a dependency like so:\n# Name                    Version                   Build  Channel\nsimulation                0.1.0                    pypi_0    pypi",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#create-a-notebook-to-test-your-package",
    "href": "pages/setup/package.html#create-a-notebook-to-test-your-package",
    "title": "Structuring our model as a package",
    "section": "Create a notebook to test your package",
    "text": "Create a notebook to test your package\nWe will run our model and analyse results within Jupyter notebooks, as they allow us to combine code, results and explanations in one document. This can help make our methods and results easier to share, read through and understand.\n\n7. Create directory and notebook. We create a dedicated directory for our notebooks in the project root (üìÅnotebooks/), and add a notebook (üìÑsimulation_test.ipynb). These can be created via your operating system‚Äôs file manager, or with the command line:\nmkdir notebooks\ntouch notebooks/simulation_test.ipynb\n\n8. Check our package works. Open notebooks/simulation_test.ipynb and add the following code. This will test that we are able to import our package and use the basic function we had created.\n# Import our simulation package\nfrom simulation.model import run_simulation\n\n# Run the simulation with default parameters\nresults = run_simulation()\nprint(f\"Simulation completed with duration: {results['duration']}\")\nprint(f\"Results: {results['results']}\")\n\n# Run with a different duration\nlong_results = run_simulation(duration=200)\nprint(f\"Longer simulation completed with duration: {long_results['duration']}\")\nprint(f\"Number of results: {len(long_results['results'])}\")\nWhen you run the notebook cells, you should see an output confirming that the simulation function runs and returns results, if everything is set up correctly.\nSimulation completed with duration: 100\nResults: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\nLonger simulation completed with duration: 200\nNumber of results: 20\n\n\nFurther information\n\n‚ÄúHow I use Python to organize my data analyses‚Äù from Joshua Cook 2024",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/code_structure.html",
    "href": "pages/setup/code_structure.html",
    "title": "Code organisation",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Minimise code duplication.\nNHS Levels of RAP (ü•à): Reusable functions and/or classes are used where appropriate.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Code organisation</span>"
    ]
  },
  {
    "objectID": "pages/model/parameters.html",
    "href": "pages/model/parameters.html",
    "title": "Parameter management",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Avoid hard-coded parameters.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Parameter management</span>"
    ]
  },
  {
    "objectID": "pages/model/distributions.html",
    "href": "pages/model/distributions.html",
    "title": "Sampling distributions and seeds",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Control randomness.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Sampling distributions and seeds</span>"
    ]
  },
  {
    "objectID": "pages/model/logs.html",
    "href": "pages/model/logs.html",
    "title": "Logs",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Logs are automatically recorded by the pipeline to ensure outputs are as expected.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Logs</span>"
    ]
  },
  {
    "objectID": "pages/execution/outputs.html",
    "href": "pages/execution/outputs.html",
    "title": "Outputs",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Include code to calculate all required model outputs\nHeather et al.¬†2025: Ensure clarity and consistency in the model results tables.\nNHS Levels of RAP (ü•à): Data is handled and output in a Tidy data format.",
    "crumbs": [
      "Model execution",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Outputs</span>"
    ]
  },
  {
    "objectID": "pages/execution/parallel.html",
    "href": "pages/execution/parallel.html",
    "title": "Parallel processing",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Optimise model run time.",
    "crumbs": [
      "Model execution",
      "<span class='chapter-number'>17</span>¬† <span class='chapter-title'>Parallel processing</span>"
    ]
  },
  {
    "objectID": "pages/analysis/tables_figures.html",
    "href": "pages/analysis/tables_figures.html",
    "title": "Producing tables and figures",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Include code to generate the tables, figures, and other reported results.\nHeather et al.¬†2025: Save outputs to a file.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>18</span>¬† <span class='chapter-title'>Producing tables and figures</span>"
    ]
  },
  {
    "objectID": "pages/analysis/scenarios.html",
    "href": "pages/analysis/scenarios.html",
    "title": "Scenarios and sensitivity analysis",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Provide code for all scenarios and sensitivity analyses.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>19</span>¬† <span class='chapter-title'>Scenarios and sensitivity analysis</span>"
    ]
  },
  {
    "objectID": "pages/analysis/full_run.html",
    "href": "pages/analysis/full_run.html",
    "title": "Full run",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Ensure model parameters are correct.\nNHS Levels of RAP (ü•à): Outputs are produced by code with minimal manual intervention.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Full run</span>"
    ]
  },
  {
    "objectID": "pages/quality/docstrings.html",
    "href": "pages/quality/docstrings.html",
    "title": "Docstrings",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Comment sufficiently.\nNHS Levels of RAP (ü•à): Code is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>21</span>¬† <span class='chapter-title'>Docstrings</span>"
    ]
  },
  {
    "objectID": "pages/quality/linting.html",
    "href": "pages/quality/linting.html",
    "title": "Linting",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Code adheres to agreed coding standards (e.g PEP8, style guide for Pyspark).",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>22</span>¬† <span class='chapter-title'>Linting</span>"
    ]
  },
  {
    "objectID": "pages/quality/tests.html",
    "href": "pages/quality/tests.html",
    "title": "Tests",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Pipeline includes a testing framework (unit tests, back tests).",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>23</span>¬† <span class='chapter-title'>Tests</span>"
    ]
  },
  {
    "objectID": "pages/quality/github_actions.html",
    "href": "pages/quality/github_actions.html",
    "title": "GitHub actions",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•á): Repository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g.¬†GitHub Actions.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>24</span>¬† <span class='chapter-title'>GitHub actions</span>"
    ]
  },
  {
    "objectID": "pages/quality/peer_review.html",
    "href": "pages/quality/peer_review.html",
    "title": "Peer review",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Code has been peer reviewed.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>25</span>¬† <span class='chapter-title'>Peer review</span>"
    ]
  },
  {
    "objectID": "pages/sharing/documentation.html",
    "href": "pages/sharing/documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Include run instructions.\nHeather et al.¬†2025: State run times and machine specifications.\nNHS Levels of RAP (ü•â): Repository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code (use NHS Open Source Policy section on Readmes as a guide).\nNHS Levels of RAP (ü•à): Code is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>26</span>¬† <span class='chapter-title'>Documentation</span>"
    ]
  },
  {
    "objectID": "pages/sharing/licence.html",
    "href": "pages/sharing/licence.html",
    "title": "Licensing",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Share code with an open licence.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>27</span>¬† <span class='chapter-title'>Licensing</span>"
    ]
  },
  {
    "objectID": "pages/sharing/archive.html",
    "href": "pages/sharing/archive.html",
    "title": "Sharing and archiving the model",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Code is published in the open and linked to & from accompanying publication (if relevant).",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>28</span>¬† <span class='chapter-title'>Sharing and archiving the model</span>"
    ]
  },
  {
    "objectID": "pages/sharing/changelog.html",
    "href": "pages/sharing/changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Link publication to a specific version of the code.\nNHS Levels of RAP (ü•á): Changes to the RAP are clearly signposted. E.g. a changelog in the package, releases etc.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>30</span>¬† <span class='chapter-title'>Changelog</span>"
    ]
  }
]