[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Discrete-Event Simulation in Python and R",
    "section": "",
    "text": "This book is a step-by-step guide to writing reproducible discrete-event simulation models in Python and R. It guides you through creating these models whilst meeting reproducibility requirements from:\n\nüåø Heather et al.¬†2025 ‚ÄúOn the reproducibility of discrete-event simulation studies in health research: an empirical study using open models‚Äù\nüè• The ‚ÄúLevels of RAP‚Äù framework from the NHS RAP Community of Practice\n\nThese are described further in Chapter 3: Reproducibility guidelines.\nThe models are created using:\n\nSimPy for Python - https://simpy.readthedocs.io/en/latest/.\nsimmer for R - https://r-simmer.org/.\n\nThis book uses healthcare discrete-event simulation models as its primary case study - modelling patient flows and resource allocation in clinical settings. However, the reproducibility principles and coding practices can be applied in other fields and for other modelling and analysis techniques.\nIt has been developed as part of the STARS project:\n\nAll code in this book is provided under the MIT licence. The accompanying text is licensed under a Creative Commons Attribution-ShareAlike 4.0 International license.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html",
    "href": "pages/intro/guidelines.html",
    "title": "3¬† Reproducibility guidelines",
    "section": "",
    "text": "3.1 Reproducibility recommendations from Heather et al.¬†2025\nThere‚Äôs lots of guidance to support reproducible research. This book focuses specifically on healthcare discrete-event simulation (DES) models, drawing from two particularly relevant frameworks:\nThis book walks through how to address all aspects of these guidelines, and the links below (üîó) take you to relevant pages with detailed guidance on each topic.\nAs part of the project STARS (Sharing Tools and Artefacts for Reproducible Simulations), a series of computational reproducibility assessments were conducted by Heather et al.¬†2025. From these, several recommendations were shared to support reproducibility of healthcare discrete-event simulation (DES) models, as described in:\nThose marked with a star (‚≠ê) were identified as having the greatest impact in Heather et al.¬†2025.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "href": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "title": "3¬† Reproducibility guidelines",
    "section": "",
    "text": "Heather, A. Monks, T. Harper, A. Mustafee, N. Mayne, A. On the reproducibility of discrete-event simulation studies in health research: an empirical study using open models (2025). arxiv. https://doi.org/10.48550/arXiv.2501.13137.\n\n\n\n3.1.1 Recommendations to support reproduction\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nSet-up\n\n\n\nShare code with an open licence ‚≠ê\nChapter 27\n\n\nLink publication to a specific version of the code\nChapter 30\n\n\nList dependencies and versions\nChapter 6\n\n\nRunning the model\n\n\n\nProvide code for all scenarios and sensitivity analyses ‚≠ê\nChapter 19\n\n\nEnsure model parameters are correct ‚≠ê\nChapter 20\n\n\nControl randomness\nChapter 10\n\n\nOutputs\n\n\n\nInclude code to calculate all required model outputs ‚≠ê\nChapter 14\n\n\nInclude code to generate the tables, figures, and other reported results ‚≠ê\nChapter 18\n\n\n\n\n\n3.1.2 Recommendations to support troubleshooting and reuse\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nDesign\n\n\n\nSeparate model code from applications\n‚ùì\n\n\nAvoid hard-coded parameters\nChapter 9\n\n\nMinimise code duplication\nChapter 8\n\n\nClarity\n\n\n\nComment sufficiently\nChapter 21\n\n\nEnsure clarity and consistency in the model results tables\nChapter 14\n\n\nInclude run instructions\nChapter 26\n\n\nState run times and machine specifications\nChapter 26\n\n\nFunctionality\n\n\n\nOptimise model run time\nChapter 17\n\n\nSave outputs to a file\nChapter 18\n\n\nAvoid excessive output files\n‚ùì\n\n\nAddress large file sizes\n‚ùì",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "href": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "title": "3¬† Reproducibility guidelines",
    "section": "3.2 ‚ÄòLevels of RAP‚Äô Maturity Framework",
    "text": "3.2 ‚ÄòLevels of RAP‚Äô Maturity Framework\nThe following framework has been directly copied from the RAP Community of Practice repository/website: NHS RAP Levels of RAP Framework.\nThis framework is maintained by the NHS RAP Community of Practice and is ¬© 2024 Crown Copyright (NHS England), shared by them under the terms of the Open Government 3.0 licence.\nThe specific version of the framework copied below is that from commit 2549256 (9th September 2024).\n\n3.2.1 ü•â Baseline\nRAP fundamentals offering resilience against future change.\n\n\n\nCriteria\nChapter\n\n\n\n\nData produced by code in an open-source language (e.g., Python, R, SQL).\nChapter 4\n\n\nCode is version controlled (see Git basics and using Git collaboratively guides).\nChapter 5\n\n\nRepository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code (use NHS Open Source Policy section on Readmes as a guide).\nChapter 26\n\n\nCode has been peer reviewed.\nChapter 25\n\n\nCode is published in the open and linked to & from accompanying publication (if relevant).\nChapter 28\n\n\n\n\n\n3.2.2 ü•à Silver\nImplementing best practice by following good analytical and software engineering standards.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nOutputs are produced by code with minimal manual intervention.\nChapter 20\n\n\nCode is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.\nChapter 26 Chapter 21\n\n\nCode is well-organised following standard directory format.\nChapter 7\n\n\nReusable functions and/or classes are used where appropriate.\nChapter 8\n\n\nCode adheres to agreed coding standards (e.g PEP8, style guide for Pyspark).\nChapter 22\n\n\nPipeline includes a testing framework (unit tests, back tests).\nChapter 23\n\n\nRepository includes dependency information (e.g.¬†requirements.txt, PipFile, environment.yml).\nChapter 6\n\n\nLogs are automatically recorded by the pipeline to ensure outputs are as expected.\nChapter 13\n\n\nData is handled and output in a Tidy data format.\nChapter 14\n\n\n\n\n\n3.2.3 ü•á Gold\nAnalysis as a product to further elevate your analytical work and enhance its reusability to the public.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nCode is fully packaged.\nChapter 7\n\n\nRepository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g.¬†GitHub Actions.\nChapter 24\n\n\nProcess runs based on event-based triggers (e.g., new data in database) or on a schedule.\nN/A\n\n\nChanges to the RAP are clearly signposted. E.g. a changelog in the package, releases etc. (See gov.uk info on Semantic Versioning).\nChapter 30",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  }
]