[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Discrete-Event Simulation in Python and R",
    "section": "",
    "text": "This book is a step-by-step guide to writing reproducible discrete-event simulation models in Python and R.\nIt guides you through creating these models whilst meeting reproducibility requirements from:\n\nüåø Heather et al.¬†2025 ‚ÄúOn the reproducibility of discrete-event simulation studies in health research: an empirical study using open models‚Äù\nüè• The ‚ÄúLevels of RAP‚Äù framework from the NHS RAP Community of Practice\n\nThese are described further in Reproducibility guidelines: Reproducibility guidelines.\nThe models are created using:\n\nSimPy for Python - https://simpy.readthedocs.io/en/latest/.\nsimmer for R - https://r-simmer.org/.\n\nThis book uses healthcare discrete-event simulation models as its primary case study - modelling patient flows and resource allocation in clinical settings. However, the reproducibility principles and coding practices can be applied in other fields and for other modelling and analysis techniques.\nIt has been developed as part of the STARS project:\n\nAll code in this book is provided under the MIT licence. The accompanying text is licensed under a Creative Commons Attribution-ShareAlike 4.0 International license.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html",
    "href": "pages/intro/guidelines.html",
    "title": "Reproducibility guidelines",
    "section": "",
    "text": "Reproducibility recommendations from Heather et al.¬†2025\nThere‚Äôs lots of guidance to support reproducible research. This book focuses specifically on healthcare discrete-event simulation (DES) models, drawing from two particularly relevant frameworks:\nThis book walks through how to address all aspects of these guidelines, and the links below (üîó) take you to relevant pages with detailed guidance on each topic.\nAs part of the project STARS (Sharing Tools and Artefacts for Reproducible Simulations), a series of computational reproducibility assessments were conducted by Heather et al.¬†2025. From these, several recommendations were shared to support reproducibility of healthcare discrete-event simulation (DES) models, as described in:\nThose marked with a star (‚≠ê) were identified as having the greatest impact in Heather et al.¬†2025.",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "href": "pages/intro/guidelines.html#reproducibility-recommendations-from-heather-et-al.-2025",
    "title": "Reproducibility guidelines",
    "section": "",
    "text": "Heather, A. Monks, T. Harper, A. Mustafee, N. Mayne, A. On the reproducibility of discrete-event simulation studies in health research: an empirical study using open models (2025). arxiv. https://doi.org/10.48550/arXiv.2501.13137.\n\n\n\nRecommendations to support reproduction\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nSet-up\n\n\n\nShare code with an open licence ‚≠ê\nLicensing\n\n\nLink publication to a specific version of the code\nChangelog\n\n\nList dependencies and versions\nDependency management\n\n\nRunning the model\n\n\n\nProvide code for all scenarios and sensitivity analyses ‚≠ê\nScenarios and sensitivity analysis\n\n\nEnsure model parameters are correct ‚≠ê\nFull run\n\n\nControl randomness\nSampling distributions and seeds\n\n\nOutputs\n\n\n\nInclude code to calculate all required model outputs ‚≠ê\nOutputs\n\n\nInclude code to generate the tables, figures, and other reported results ‚≠ê\nProducing tables and figures\n\n\n\n\n\nRecommendations to support troubleshooting and reuse\n\n\n\n\n\n\n\nRecommendation\nChapter\n\n\n\n\nDesign\n\n\n\nSeparate model code from applications\n‚ùì\n\n\nAvoid hard-coded parameters\nParameter management\n\n\nMinimise code duplication\nCode organisation\n\n\nClarity\n\n\n\nComment sufficiently\nDocstrings\n\n\nEnsure clarity and consistency in the model results tables\nOutputs\n\n\nInclude run instructions\nDocumentation\n\n\nState run times and machine specifications\nDocumentation\n\n\nFunctionality\n\n\n\nOptimise model run time\nParallel processing\n\n\nSave outputs to a file\nProducing tables and figures\n\n\nAvoid excessive output files\n‚ùì\n\n\nAddress large file sizes\n‚ùì",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "href": "pages/intro/guidelines.html#levels-of-rap-maturity-framework",
    "title": "Reproducibility guidelines",
    "section": "‚ÄòLevels of RAP‚Äô Maturity Framework",
    "text": "‚ÄòLevels of RAP‚Äô Maturity Framework\nThe following framework has been directly copied from the RAP Community of Practice repository/website: NHS RAP Levels of RAP Framework.\nThis framework is maintained by the NHS RAP Community of Practice and is ¬© 2024 Crown Copyright (NHS England), shared by them under the terms of the Open Government 3.0 licence.\nThe specific version of the framework copied below is that from commit 2549256 (9th September 2024).\n\nü•â Baseline\nRAP fundamentals offering resilience against future change.\n\n\n\nCriteria\nChapter\n\n\n\n\nData produced by code in an open-source language (e.g., Python, R, SQL).\nFree and open source software (FOSS)\n\n\nCode is version controlled (see Git basics and using Git collaboratively guides).\nVersion control and Git\n\n\nRepository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code (use NHS Open Source Policy section on Readmes as a guide).\nDocumentation\n\n\nCode has been peer reviewed.\nPeer review\n\n\nCode is published in the open and linked to & from accompanying publication (if relevant).\nSharing and archiving the model\n\n\n\n\n\nü•à Silver\nImplementing best practice by following good analytical and software engineering standards.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nOutputs are produced by code with minimal manual intervention.\nFull run\n\n\nCode is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.\nDocumentation Docstrings\n\n\nCode is well-organised following standard directory format.\nStructuring our model as a package\n\n\nReusable functions and/or classes are used where appropriate.\nCode organisation\n\n\nCode adheres to agreed coding standards (e.g PEP8, style guide for Pyspark).\nLinting\n\n\nPipeline includes a testing framework (unit tests, back tests).\nTests\n\n\nRepository includes dependency information (e.g.¬†requirements.txt, PipFile, environment.yml).\nDependency management\n\n\nLogs are automatically recorded by the pipeline to ensure outputs are as expected.\nLogs\n\n\nData is handled and output in a Tidy data format.\nOutputs\n\n\n\n\n\nü•á Gold\nAnalysis as a product to further elevate your analytical work and enhance its reusability to the public.\nMeeting all of the above requirements, plus:\n\n\n\nCriteria\nChapter\n\n\n\n\nCode is fully packaged.\nStructuring our model as a package\n\n\nRepository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g.¬†GitHub Actions.\nGitHub actions\n\n\nProcess runs based on event-based triggers (e.g., new data in database) or on a schedule.\nN/A\n\n\nChanges to the RAP are clearly signposted. E.g. a changelog in the package, releases etc. (See gov.uk info on Semantic Versioning).\nChangelog",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Reproducibility guidelines</span>"
    ]
  },
  {
    "objectID": "pages/intro/foss.html",
    "href": "pages/intro/foss.html",
    "title": "Free and open source software (FOSS)",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Data produced by code in an open-source language (e.g., Python, R, SQL).",
    "crumbs": [
      "Introduction",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Free and open source software (FOSS)</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html",
    "href": "pages/setup/version.html",
    "title": "Version control and Git",
    "section": "",
    "text": "Version control\nVersion control is a way to track changes to your documents over time. You can:\nThis is super handy, whether you‚Äôre working by yourself or in a team!\nüí° Recommendation: Using version control from the start of the project.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#version-control",
    "href": "pages/setup/version.html#version-control",
    "title": "Version control and Git",
    "section": "",
    "text": "Track changes to files: see what changes, when it changed, and who changed it.\n‚ÄúRoll back‚Äù to earlier versions of your files if something goes wrong.\nWork simultaneously with others without overwriting each other.\nTry new ideas without risking your main work.\nBack up and share work online using platforms like GitHub.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#git",
    "href": "pages/setup/version.html#git",
    "title": "Version control and Git",
    "section": "Git",
    "text": "Git\nThe most popular version control system is Git.\nWhen using Git, we refer to our work as a repository. This is simply a folder containing your project files, as well as a special hidden .git/ folder which stores all the version history.\nWe take snapshots of the files at specific points in time, and these are called commits.\nGit can just be used on your local computer, but most people will use an online platform to store their repositories. The most popular options are:\n\nGitHub - https://github.com/.\nGitLab - https://gitlab.com/.\nGBitBucket - https://bitbucket.org/.\n\nThis tutorial will focus on GitHub as it is the most widely used and beginner-friendly.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#setting-up-a-github-repository",
    "href": "pages/setup/version.html#setting-up-a-github-repository",
    "title": "Version control and Git",
    "section": "Setting up a GitHub repository",
    "text": "Setting up a GitHub repository\n1. Create an account. Go to https://github.com/signup and sign up with your email and a username.\n\n2. Create a new repository. Click the ‚Äú+‚Äù button in the top right corner, and select ‚ÄúNew repository‚Äù.\n\n\n\n\n\nThen fill out the form to create a repository‚Ä¶\n\nRepository name: e.g.¬†emergency-des\nDescription: e.g.¬†Discrete-event simulation of a hospital emergency department.\nVisibility: Choose whether to make the repository public (anyone can see it) or private (only visible to you and people your invite).\nREADME: Select ‚ÄúAdd a README file‚Äù, which will create a blank README we can populate later (see Documentation).\n.gitignore: Select the ‚ÄúPython‚Äù or ‚ÄúR‚Äù .gitignore template. This will create a .gitignore file in your repository that tells Git which files not to track.\nLicence: Select an appropriate licence for your repository (see Licensing for more information and advice).\n\n\n\n\n\n\n\nSharing your work openly\n\n\n\nWe would encourage you to make your work open access - i.e.¬†creating a public GitHub repository, and using a permissive open licence (e.g.¬†MIT). As described by The Turing Way, benefits to making your work open include:\n\nSharing: Easy to reference and share in papers and presentations.\nTransparency: Clearly shows how you conducted your analyses.\nReproducibility: Others can verify and reproduce your results.\nQuality: Knowing it‚Äôs public encourages good practice.\nReuse and learning: Others can learn from and build on your work, reducing research waste.\nExtends impact: Your work can continue to have impact after the project ends. This could include for you, if you change jobs, and want to be able to look back on old code!\nCollaboration: Creates opportunities for collaboration, if others come across your code and are interested in working together.\nFunder requirements: For research projects, some grants now mandate open code.\n\nIncluding a license (Licensing) and citation instructions (Citation guidance) enables others to use your code while giving you credit.\nThat said, it‚Äôs your code and your choice - if you have specific concerns or proprietary work, a private repository is always an option.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#cloning-the-repository",
    "href": "pages/setup/version.html#cloning-the-repository",
    "title": "Version control and Git",
    "section": "Cloning the repository",
    "text": "Cloning the repository\nYou have created a remote repository on GitHub - we now want to clone it, which means we create a local copy on your computer, and can sync between the local and remote repositories.\n1. Get the URL. On the main page of you repository, click the green ‚Äú&lt;&gt; Code‚Äù button, then copy the HTTPS url.\n\n2. Clone the repository. Depending on your operating system, open either the terminal (Linux or Mac) or Git Bash (windows). Navigate to the location where you would like to create the folder containing your repository. Then enter git clone and the pasted URL - for example:\ngit clone https://github.com/amyheather/hospital-des.git\n\nThis will have created a local copy of the repository, which you can open with your preferred development environment (e.g.¬†VSCode, RStudio).",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#creating-a-branch-and-pushing-changes",
    "href": "pages/setup/version.html#creating-a-branch-and-pushing-changes",
    "title": "Version control and Git",
    "section": "Creating a branch and pushing changes",
    "text": "Creating a branch and pushing changes\nIt is best practice to work in branches. A branch is like a separate workspace where you can safely experiment with changes without affecting the main project.\nAs in the diagram below, you can make several commits in this branch, and when you‚Äôre ready, merge back into the main project (e.g.¬†when new feature complete, or reached a stable point where everything is working properly).\nThis is valuable even when you‚Äôre the only person working on the repository - but with multiple collaborator, becomes essential! Every person should work on their own branch.\n\nTo work in a branch and push changes‚Ä¶\n1. Create a branch. Open your terminal or Git Bash, and make sure your current working directory is your Git repository. To create a new branch (here, named dev), then run:\ngit branch dev\nTo move into this branch:\ngit checkout dev\nYou should see a message ‚ÄúSwitched to branch ‚Äòdev‚Äô‚Äù.\nWe can add this branch to the remote GitHub repository by running:\ngit push -u origin dev\n2. Make some changes. This could be any changes to code, documentation or other artefacts in the repository. So we can test this out, let‚Äôs make a simple change to our README -\nBefore:\n# hospital-des\nDiscrete-event simulation of a hospital emergency department.\nAfter:\n# Hospital DES\n\nDiscrete-event simulation of a hospital emergency department.\n\nAuthor: Amy Heather\n\nWork in progress!\n3. Commit the changes. To save this new version of our file to Git, we need to commit the changes. We use git add to choose which files to commit. We then write a descriptive commit message using git commit. Finally, we push the changes using git push.\ngit add README.md\ngit commit -m \"docs(README): add author + work-in-progress notice\"\ngit push\n4. Merge the changes. One of the easiest ways to merge changes into main is using the GitHub website. Open your repository. You should see that you now have ‚Äú2 Branches‚Äù. Navigate to your new branch‚Ä¶\n\nWe can see this is now 1 commit ahead of main. We can browse the files in this branch, and can click on the right hand ‚Äú2 Commits‚Äù to view the version history.\n\nThis just has 2 commits - the creation of our repository, and the change to our README file:\n\nTo merge the changes with main, go back to the page for that branch, and select either:\n\n‚ÄúThis branch is 1 commit ahead of main‚Äù, or\n‚ÄúCompare & pull request‚Äù\n\n\nThis will open a page which shows all the new commits in your branch, and side-by-side changes the files you have modified.\nClick the green ‚ÄúCreate pull request‚Äù button.\n\nA pull request is a request to merge changes from one branch to another. This provides an opportunity, for example, for others to review the changes and make sure they are happy before these are merged.\nWe can modify the message - or just leave as is, and select the ‚ÄúCreate pull request‚Äù button.\n\nIf new changes have been made to the main branch since you created your branch (e.g., new commits, merges from other branches, or contributions from other collaborators) and you‚Äôve modified the same files, you may encounter merge conflicts that need to be resolved.\nIf not though, you can just select ‚ÄúMerge pull request‚Äù and then ‚ÄúConfirm merge‚Äù.\n\n\n5. Close your branch. We can now delete the branch-\n\nOn our local machine, switch back to main:\ngit checkout main\nThen pull the updated main branch, which contains our merged changes:\ngit pull\nWe can then delete our local branch:\ngit branch -d dev\nAnd also get the latest list of branches from the remote repository, with our old branch now removed:\ngit remote prune origin\nTo continue working in the repository, simply create a new branch and continue as above.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/version.html#github-organisations",
    "href": "pages/setup/version.html#github-organisations",
    "title": "Version control and Git",
    "section": "GitHub organisations",
    "text": "GitHub organisations\nWhen creating a GitHub repository, by default, it will set the owner to be your personal user account. While this works well for person projects, you will often find it better to create repositories within a GitHub organisation instead.\nA GitHub organisation acts like a shared account which multiple people can own, access and collaborate on. Advantages of this are:\n\nOne place for each project/team. Related repositories are grouped into one organisation. For example, you could have different organisations for different teams or projects, with all the relevant repositories for each.\nShared ownership. Multiple people can have administrative access.\nContinuity. If you leave a project, repositories remain accessible to and owned by the team.\nProfessional branding. Repositories appear under the organisation name rather than your personal username.\n\nTo create a GitHub organisation‚Ä¶\n1. Open settings. In the top-right corner, select your profile photo, then click ‚ÄúSettings‚Äù.\n\n\n\n\n\nThen select ‚ÄúOrganizations‚Äù under the Access section in the sidebar.\n\n\n\n\n\n2. Make new organisation. In the top-right corner, select ‚ÄúNew organization‚Äù.\n3. Choose a plan. For example, simply select the Free plan.\n4. Enter your organisation details. It will ask for a name and contact email. You can typically then select that the organisation belongs to your personal account. Follow the prompts to create the organisation. You can then add other GitHub users as owners or collaborators.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Version control and Git</span>"
    ]
  },
  {
    "objectID": "pages/setup/environment.html",
    "href": "pages/setup/environment.html",
    "title": "Dependency management",
    "section": "",
    "text": "Choose your language:¬†¬† Python R\n\n\nReproducibility guidelines:\n\nHeather et al.¬†2025: List dependencies and versions.\nNHS Levels of RAP (ü•à): Repository includes dependency information.\n\n\n\nPython\n\n\nR",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Dependency management</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html",
    "href": "pages/setup/package.html",
    "title": "Structuring our model as a package",
    "section": "",
    "text": "Rationale\nBuilding our simulation model as a package has several advantages:",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#rationale",
    "href": "pages/setup/package.html#rationale",
    "title": "Structuring our model as a package",
    "section": "",
    "text": "The model is installed in our environment and can then be easily used anywhere else in our directory (or even from other directories) without needing to specify a system path.\nIt encourages us to create a well-organised repository following standardised established package structures.\nIt helps keep the model and analysis code separate, improving maintainability, reusability, and reducing the risk of unintended side effects.\nIt supports automated testing frameworks which can verify functionality (Tests).",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/package.html#packaging-our-model",
    "href": "pages/setup/package.html#packaging-our-model",
    "title": "Structuring our model as a package",
    "section": "Packaging our model",
    "text": "Packaging our model\n\n\nCreating a package\nIn Python, a package is simply a directory with containing an üìÑ__init__.py file, which makes that directory recognisable as a package. The basic structure for our package is:\nour_directory/\n‚îú‚îÄ‚îÄ simulation/             # Main package directory\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py         # Makes the directory a package\n‚îÇ   ‚îú‚îÄ‚îÄ model.py            # Code for the model\n‚îÇ   ‚îî‚îÄ‚îÄ ...                 # Other .py files (e.g. parameters, replications)\n‚îî‚îÄ‚îÄ pyproject.toml          # Package metadata\nThe code for the model is contained in üìÅsimulation/ within individual python files (e.g.¬†üìÑmodel.py). The üìÑ__init__.py file identifies this directory as a package and contains basic metadata:\n\"\"\"SimPy Discrete-Event Simulation (DES) Model.\n\"\"\"\n\n__version__ = \"0.1.0\"\nThe üìÑpyproject.toml file in the root directory contains package configuration information. We‚Äôre using flit as our build tool because of its simplicity. The dynamic field tells flit to extract the version and description from our üìÑ__init__.py file.\n[build-system]\nrequires = [\"flit\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[project]\nname = \"simulation\"\ndynamic = [\"version\", \"description\"]\n\n\nInstalling and using the package\n\nTo use our package during development, we install it in ‚Äúeditable‚Äù mode using the -e flag. This means it will update with any changes to the source code in üìÅsimulation/.\nIn a conda üìÑenvironment.yaml file:\nname: our-environment\nchannels:\n  - conda-forge\ndependencies:\n  - python\n  - simpy\n  - pip:\n    - -e .[dev]\nIn a üìÑrequirements.txt file:\nsimpy\n-e .[dev]\n\n\n\nFurther information\n\n‚ÄúHow I use Python to organize my data analyses‚Äù from Joshua Cook 2024\n\n\n\n\n\nCreating a package\nA basic R package structure looks like this:\nour_directory/\n‚îú‚îÄ‚îÄ R/                  # Directory containing R functions\n‚îÇ   ‚îú‚îÄ‚îÄ model.R         # Code for the model\n‚îÇ   ‚îî‚îÄ‚îÄ ...             # Other .R files (e.g. parameters, replications)\n‚îú‚îÄ‚îÄ man/                # Documentation (generated from roxygen comments)\n‚îú‚îÄ‚îÄ tests/              # Unit tests\n‚îú‚îÄ‚îÄ DESCRIPTION         # Package metadata\n‚îú‚îÄ‚îÄ NAMESPACE           # Package exports (usually generated)\n‚îî‚îÄ‚îÄ rmarkdown/          # Analysis notebooks\nThe core of our package is the üìÅR/ directory, which contains all our simulation functions within R files (e.g.¬†üìÑmodel.R). Each function should be documented using roxygen2-style comments that will automatically generate the documentation in the üìÅman/ directory. Writing these docstrings is covered in Docstrings.\nThe DESCRIPTION file contains essential metadata about the package:\nPackage: simulation\nType: Package\nTitle: Simulation\nVersion: 0.1.0\nAuthors@R: c(\n    person(\n      \"Amy\", \"Heather\",\n      email = \"a.heather2@exeter.ac.uk\",\n      role = c(\"aut\", \"cre\")\n    )\n  )\nURL: https://github.com/pythonhealthdatascience/rap_template_r_des\nDescription: Template reproducible analytical pipeline (RAP) for simple R\n    discrete-event simulation (DES) model.\nLicense: MIT + file LICENSE\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.3.2\nImports:\n    simmer,\n    magrittr,\n    dplyr,\n    purrr,\n    rlang,\n    tidyr,\n    tidyselect,\n    future,\n    future.apply,\n    ggplot2,\n    tibble,\n    gridExtra,\n    R6\nSuggests:\n    testthat (&gt;= 3.0.0),\n    patrick,\n    lintr,\n    devtools,\n    xtable,\n    data.table,\n    mockery\nConfig/testthat/edition: 3\n\n\nInstalling and using the package\nWe use the devtools package to build and install our package:\n# Install the package from the local directory\ndevtools::install()\n\n# Load the package\nlibrary(simulation)\n\n# Now you can use functions from the package...\nWhen developing the package, these commands are particularly helpful:\n\ndevtools::document() to reproduce documentation in üìÅman/ after changes to the docstrings.\ndevtools::check() to build and check the package follows best practices.\ndevtools::install() to load the latest version of the package into your environment.\ndevtools::test() to run the tests in üìÅtests/.\n\nFor analysis and reporting, we store our files in the üìÅrmarkdown/ directory rather than in üìÅvignettes/. This is because files in üìÅvignettes/ are re-run with every package build/check. For simulations with longer run times, this can be inefficient - although this may be of interest for quicker simulations, as it will help ensure you always run everything from scratch. However, file paths for saving outputs can cause errors during the package build process.\n\n\n\nFurther information\n\n‚ÄúOpen, Reproducible, and Distributable Research With R Packages‚Äù from the DANTE Project - for example, this page on vignettes.\n‚ÄúSharing and organizing research products as R packages‚Äù from Vuorre and Crump 2020",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Structuring our model as a package</span>"
    ]
  },
  {
    "objectID": "pages/setup/code_structure.html",
    "href": "pages/setup/code_structure.html",
    "title": "Code organisation",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Minimise code duplication.\nNHS Levels of RAP (ü•à): Reusable functions and/or classes are used where appropriate.",
    "crumbs": [
      "Setup",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Code organisation</span>"
    ]
  },
  {
    "objectID": "pages/model/parameters.html",
    "href": "pages/model/parameters.html",
    "title": "Parameter management",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Avoid hard-coded parameters.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Parameter management</span>"
    ]
  },
  {
    "objectID": "pages/model/distributions.html",
    "href": "pages/model/distributions.html",
    "title": "Sampling distributions and seeds",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Control randomness.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Sampling distributions and seeds</span>"
    ]
  },
  {
    "objectID": "pages/model/logs.html",
    "href": "pages/model/logs.html",
    "title": "Logs",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Logs are automatically recorded by the pipeline to ensure outputs are as expected.",
    "crumbs": [
      "Model creation",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Logs</span>"
    ]
  },
  {
    "objectID": "pages/execution/outputs.html",
    "href": "pages/execution/outputs.html",
    "title": "Outputs",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Include code to calculate all required model outputs\nHeather et al.¬†2025: Ensure clarity and consistency in the model results tables.\nNHS Levels of RAP (ü•à): Data is handled and output in a Tidy data format.",
    "crumbs": [
      "Model execution",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Outputs</span>"
    ]
  },
  {
    "objectID": "pages/execution/parallel.html",
    "href": "pages/execution/parallel.html",
    "title": "Parallel processing",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Optimise model run time.",
    "crumbs": [
      "Model execution",
      "<span class='chapter-number'>17</span>¬† <span class='chapter-title'>Parallel processing</span>"
    ]
  },
  {
    "objectID": "pages/analysis/tables_figures.html",
    "href": "pages/analysis/tables_figures.html",
    "title": "Producing tables and figures",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Include code to generate the tables, figures, and other reported results.\nHeather et al.¬†2025: Save outputs to a file.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>18</span>¬† <span class='chapter-title'>Producing tables and figures</span>"
    ]
  },
  {
    "objectID": "pages/analysis/scenarios.html",
    "href": "pages/analysis/scenarios.html",
    "title": "Scenarios and sensitivity analysis",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Provide code for all scenarios and sensitivity analyses.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>19</span>¬† <span class='chapter-title'>Scenarios and sensitivity analysis</span>"
    ]
  },
  {
    "objectID": "pages/analysis/full_run.html",
    "href": "pages/analysis/full_run.html",
    "title": "Full run",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Ensure model parameters are correct.\nNHS Levels of RAP (ü•à): Outputs are produced by code with minimal manual intervention.",
    "crumbs": [
      "Analysis",
      "<span class='chapter-number'>20</span>¬† <span class='chapter-title'>Full run</span>"
    ]
  },
  {
    "objectID": "pages/quality/docstrings.html",
    "href": "pages/quality/docstrings.html",
    "title": "Docstrings",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Comment sufficiently.\nNHS Levels of RAP (ü•à): Code is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>21</span>¬† <span class='chapter-title'>Docstrings</span>"
    ]
  },
  {
    "objectID": "pages/quality/linting.html",
    "href": "pages/quality/linting.html",
    "title": "Linting",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Code adheres to agreed coding standards (e.g PEP8, style guide for Pyspark).",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>22</span>¬† <span class='chapter-title'>Linting</span>"
    ]
  },
  {
    "objectID": "pages/quality/tests.html",
    "href": "pages/quality/tests.html",
    "title": "Tests",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•à): Pipeline includes a testing framework (unit tests, back tests).",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>23</span>¬† <span class='chapter-title'>Tests</span>"
    ]
  },
  {
    "objectID": "pages/quality/github_actions.html",
    "href": "pages/quality/github_actions.html",
    "title": "GitHub actions",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•á): Repository automatically runs tests etc. via CI/CD or a different integration/deployment tool e.g.¬†GitHub Actions.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>24</span>¬† <span class='chapter-title'>GitHub actions</span>"
    ]
  },
  {
    "objectID": "pages/quality/peer_review.html",
    "href": "pages/quality/peer_review.html",
    "title": "Peer review",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Code has been peer reviewed.",
    "crumbs": [
      "Quality assurance",
      "<span class='chapter-number'>25</span>¬† <span class='chapter-title'>Peer review</span>"
    ]
  },
  {
    "objectID": "pages/sharing/documentation.html",
    "href": "pages/sharing/documentation.html",
    "title": "Documentation",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Include run instructions.\nHeather et al.¬†2025: State run times and machine specifications.\nNHS Levels of RAP (ü•â): Repository includes a README.md file (or equivalent) that clearly details steps a user must follow to reproduce the code (use NHS Open Source Policy section on Readmes as a guide).\nNHS Levels of RAP (ü•à): Code is well-documented including user guidance, explanation of code structure & methodology and docstrings for functions.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>26</span>¬† <span class='chapter-title'>Documentation</span>"
    ]
  },
  {
    "objectID": "pages/sharing/licence.html",
    "href": "pages/sharing/licence.html",
    "title": "Licensing",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025 (‚≠ê): Share code with an open licence.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>27</span>¬† <span class='chapter-title'>Licensing</span>"
    ]
  },
  {
    "objectID": "pages/sharing/archive.html",
    "href": "pages/sharing/archive.html",
    "title": "Sharing and archiving the model",
    "section": "",
    "text": "Reproducibility guidelines:\n\nNHS Levels of RAP (ü•â): Code is published in the open and linked to & from accompanying publication (if relevant).",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>28</span>¬† <span class='chapter-title'>Sharing and archiving the model</span>"
    ]
  },
  {
    "objectID": "pages/sharing/changelog.html",
    "href": "pages/sharing/changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Reproducibility guidelines:\n\nHeather et al.¬†2025: Link publication to a specific version of the code.\nNHS Levels of RAP (ü•á): Changes to the RAP are clearly signposted. E.g. a changelog in the package, releases etc.",
    "crumbs": [
      "Sharing the model",
      "<span class='chapter-number'>30</span>¬† <span class='chapter-title'>Changelog</span>"
    ]
  }
]